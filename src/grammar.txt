program:
	(
		package
		| module
	)*
	;

header_if:
	TokKwIf '(' expr ')'
	;
header_else_if:
	TokKwElse header_if
	;
header_else:
	TokKwElse
	;

header_for:
	TokKwFor '(' ident : expr ')'
	;

header_generate_if:
	TokKwGenerate header_if:
	;
header_else_generate_if:
	TokKwElse header_generate_if
	;
header_else_generate:
	TokKwElse TokKwGenerate
	;
header_generate_for:
	TokKwGenerate ident? header_for
	;


package:
	TokKwPackage ident
		scope_package
	;

scope_package:
	'{'
		(
			generate_package
			| package
			| module
			| const
			| using
			| decl_callable
			| decl_cstm_type
		)*
	'}'
	;


generate_package:
	generate_package_if
	| generate_package_for
	;
generate_package_if:
	header_generate_if scope_package
	(header_else_generate_if scope_package)*
	(header_else_generate scope_package)?
	;
generate_package_for:
	header_generate_for scope_package
	;


callable_member_prefix:
	// Handled by lookahead
	// TokKwConst, TokKwVirtual, TokKwStatic
	;

contents_modproc:
	param_list? arg_list
		scope_modproc
	;

proc:
	TokKwProc (ident | TokKwPort | const_str)
		contents_modproc
	;
module:
	TokKwModule ident
		contents_modproc
	;


scope_modproc:
	'{'
		(
			generate_modproc
			| module
			| const
			| var
			| using
			| decl_callable
			| decl_cstm_type
			| hardware_block
		)*
	'}'
	;

generate_modproc:
	generate_modproc_if
	| generate_modproc_for
	;
generate_modproc_if:
	header_generate_if scope_modproc
	(header_else_generate_if scope_modproc)*
	(header_else_generate scope_modproc)?
	;
generate_modproc_for:
	header_generate_for scope_modproc
	;

decl_callable:
	func
	| task
	| proc
	;

contents_func_task:
	param_list? arg_list
		scope_behav
	;

func:
	TokKwFunc typename
		contents_func_task
	;
task:
	TokKwTask
		contents_func_task
	;

scope_behav:
	'{'
		(
			inner_scope_behav
		)*
	'}'
	;
inner_scope_behav:
	generate_behav
	| const
	| var
	| using
	| stmt_assign
	| stmt_if
	| stmt_for
	| stmt_while
	| stmt_switch
	| stmt_switchz
	| ident_etc
	| decl_cstm_type
	;


generate_behav:
	generate_behav_if
	| generate_behav_for
	;
generate_behav_if:
	header_generate_if scope_behav
	(header_else_generate_if scope_behav)*
	(header_else_generate scope_behav)?
	;

generate_behav_for:
	header_generate_for scope_behav
	;

const:
	TokKwConst typename?
		(ident_terminal '=' expr)
		(',' ident_terminal '=' expr)*
		';'
	;
var:
	typename
		ident_terminal ('=' expr)?
		(',' ident_terminal ('=' expr)?)*
		';'
	;

using:
	TokKwUsing ident_etc ('=' ident_etc)?
		';'
	;

stmt_assign:
	expr '=' expr ';'
	;
stmt_if:
	header_if scope_behav
	(header_else_if scope_behav)*
	(header_else scope_behav)?
	;

stmt_for:
	header_for
		scope_behav
	;

stmt_while:
	TokKwWhile '(' expr ')'
		scope_behav
	;
stmt_switch:
	TokKwSwitch '(' expr ')'
		scope_switch
	;
stmt_switchz:
	TokKwSwitchz '(' expr ')'
		scope_switch
	;
scope_switch:
	'{'
		(
			(TokKwCase expr ':' (scope_behav | inner_scope_behav))
			| (TokKwDefault ':' (scope_behav | inner_scope_behav))
		)*
	'}'
	;


decl_cstm_type:
	class
	| enum
	| union
	;

class:
	TokKwPacked? TokKwClass ident param_list?
		extends?
		scope_class
		ident_terminal? ';'
	;
extends:
	TokKwVirtual? TokKwExtends typename
	;

scope_class:
	'{'
		(
			member_access_label?
			(
				generate_class
				| const
				| var
				| using
				| (callable_member_prefix? decl_callable)
				| decl_cstm_type
			)
		)*
	'}'
	;

generate_class:
	generate_class_if
	| generate_class_for
	;
generate_class_if:
	header_generate_if scope_class
	(header_else_generate_if scope_class)*
	(header_else_generate scope_class)?
	;
generate_class_for:
	header_generate_for scope_class

member_access_label:
	(TokKwPublic | TokKwProtected | TokKwPrivate) ':'
	;

enum:
	TokKwEnum typename? ident
	'{'
		ident_terminal
		(',' ident_terminal)
		(',')?
	'}' ident_terminal? ';'
	;


// Top-level contents of a `module` or a `proc`.
hardware_block:
	cont_assign
	| initial
	| always_comb
	| always_blk
	| always_ff

	// Inside a `proc`, this is still valid.  This means that `module`s can
	// be instantiated inside of `class`es' `proc`s.
	| inst

	// This needs to be a proc call, but that's a semantic analysis
	// problem.
	| ident_etc
	;

cont_assign:
	TokKwAssign expr '=' expr ';'
	;
initial:
	TokKwInitial (scope_behav | inner_scope_behav)
	;
always_comb:
	TokKwAlwaysComb (scope_behav | inner_scope_behav)
	;
always_blk:
	TokKwAlwaysBlk edge_list
		(scope_behav | inner_scope_behav)
	;
always_ff:
	TokKwAlwaysFf edge_list
		(scope_behav | inner_scope_behav)
	;
edge_list:
	'('
		(posedge_inst | negedge_inst)
		(',' (posedge_inst | negedge_inst))*
	')'
	;
posedge_inst:
	TokKwPosedge expr
	;
negedge_inst:
	TokKwNegedge expr
	;

inst:
	TokKwInst ident_etc param_list?
		ident? arg_list? ';'
	;


param_list:
	'['
		param_sublist
		(',' param_sublist)*
		(',')?
	']'
	;

param_sublist:
	(pararg_type_sublist
	| param_module_sublist
	| pararg_var_sublist)
	(',' param_sublist)?
	(',')?
	;

arg_list:
	'('
		(arg_sublist
		(',' arg_sublist)*)?
		(',')?
	')'
	;

arg_sublist:
	(arg_port_sublist
	| pararg_type_sublist)
	(',' arg_sublist)?
	(',')?
	;

arg_port_sublist:
	(TokKwInput
	| TokKwOutput
	| TokKwBidir)
	pararg_var_sublist
	;

pararg_var_sublist:
	typename
	ident_terminal ('=' expr)?
	(',' ident_terminal ('=' expr)?)*
	;

pararg_type_sublist:
	TokKwType
	pararg_ident_equals_typename_sublist
	;

param_module_sublist:
	TokKwModule
	pararg_ident_equals_typename_sublist
	;

pararg_ident_equals_typename_sublist:
	ident ('=' typename)?
	(',' ident ('=' typename)?)*
	;

param_inst_list:
	'['
		(
			pos_pararg_inst_list
			| named_pararg_inst_list
		)?
		(',')?
	']'
	;

pos_pararg_inst_list:
	expr
	(',' expr)*
	;
named_pararg_inst_list:
	ident '=' expr
	(',' ident '=' expr)*
	;


typename:
	param_possible_typename
	| no_param_possible_typename
	| typeof
	;
param_possible_typename:
	(ident_etc
		| TokKwUwire | TokKwSwire
		| TokKwUbit | TokKwSbit)
		param_inst_list
	;
no_param_possible_typename:
	TokKwVoid | TokKwAuto
	| TokUbyte | TokSbyte
	| TokUshortint | TokSshortint
	| TokUint | TokSint
	| TokUlongint | TokSlongint
	;

typeof:
	TokKwTypeof '(' expr | typename ')'
	;

expr:
	inner_expr
	| expr_logical
	;
inner_expr:
	expr_logical TokOpLogical expr
	;

expr_logical:
	inner_expr_logical
	| expr_compare
	;
inner_expr_logical:
	expr_compare TokOpCompare expr_logical
	;

expr_compare:
	inner_expr_compare
	| expr_add_sub
	;
inner_expr_compare:
	expr_add_sub TokOpPlusMinus expr_compare
	;

expr_add_sub:
	inner_expr_add_sub
	| expr_mul_div_mod_etc
	;
inner_expr_add_sub:
	expr_mul_div_mod_etc TokOpMulDivModEtc expr_add_sub
	;

expr_mul_div_mod_etc:
	inner_expr_mul_div_mod_etc
	| '(' expr ')'
	| dollar_global_clock
	| dollar_pow_expr
	| ident_etc
	| num_expr
	| const_str
	;

inner_expr_mul_div_mod_etc:
	TokOpUnary expr
	;

dollar_global_clock:
	TokKwDollarGlobalClock
	;

dollar_pow_expr:
	TokKwDollarPow '(' expr ',' expr ')'
	;
const_str:
	TokConstStr
	;


ident_etc:
	ident_etc_pre_dollar_func
	| ident_etc_post_dollar_func
	| inner_ident_etc
	;
ident_etc_pre_dollar_func:
	TokKwDollarFuncOfOne '(' ident_etc ')'
	;
ident_etc_post_dollar_func:
	inner_ident_etc TokKwDollarFuncOfOne
	;

inner_ident_etc:
	ident_terminal
	| ident_member_access
	| ident_call
	| ident_no_param_overloaded_call
	| ident_param_overloaded_call
	;

ident_terminal:
	ident_bracket
	| ident
	;

ident_member_access:
	ident_terminal '.' inner_ident_etc
	;
ident:
	TokIdent
	;

ident_bracket:
	ident ('[' expr ']')+
	;

ident_call:
	ident param_inst_list? arg_inst_list
	;

ident_no_param_overloaded_call:
	ident_terminal arg_inst_list
	;
ident_param_overloaded_call:
	ident_terminal '.' param_inst_list arg_inst_list
	;

