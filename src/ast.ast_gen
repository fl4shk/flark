Package:
	child ident, scope;
ScopePackage, List:
Module:
	child ident, param_list, port_list, scope;
ScopeModule, List:
InputSubPortArgList, List:
	child typename;
OutputSubPortArgList, List:
	child typename;
BidirSubPortArgList, List:
	child typename;
SubParamArgList, List:
	child primary;

LeftRightBase:
	child left, right;

// List of SubParamArgList's
ParamArgList, List:

// Example:  DataInout i_a_arr[ARR_SIZE]
// The `NodeIdentBracket` indicates both `i_a_arr` (`ident` child) and
// `[ARR_SIZE]` (`list` child "inherited" from `NodeList`)
IdentBracket, List:
	child ident;

// This represents the `.`, indicating a scope.
IdentScope:

// This is either an expression or a statement.  It can only be an
// expression for non-`void` `func`tions.
Call:
	child ident_etc, param_inst_list;

// A string of identifiers and operations chained together via the `.`
// (scope) operator.
IdentEtc, List:

NumExpr:
	initvar BigNum _n;
SizedNumExpr, NumExpr:
	child size;


// Blank brackets (`[]`) indicate that (a) this pair is on a port
// and (b) that this typename's generics or variable's dimensions are
// determined by what is connected to the port.
// For generics, it is different from when the brackets are left out
// entirely, as that indicates use of purely default values for the
// generics.  For arrays, it is not possible to have them without
// brackets.
// When there is no expression, it indicates that this bracket pair is
// blank.
BracketPair:
	child expr;

HasString:
	initvar string _s;

Ident, HasString:
ConstString, HasString:

Enum:
	child typename, ident, scope;
ScopeEnum, List:

Class:
	initvar bool _packed;
	child ident, param_list, extends, scope, var_list;
ScopeClass, List:

Typename:
	child ident, param_inst_list;

Type:
Auto: Void:
Uwire: Swire: Ubit: Sbit:
Ubyte: Sbyte: Ushortint: Sshortint:
Uint: Sint: Ulongint: Slongint:
Self:
Port:

PosParamArgInstList, List:
NamedParamArgInstList, List:
SliceRange, LeftRightBase:
OneParamArgInst, LeftRightBase:

//// Expression parsing
//expr:
//	exprLogical
//	| exprLogical TokOpLogical expr 
//	;
//
//exprLogical:
//	exprCompare
//	| exprCompare TokOpCompare exprLogical 
//	;
//
//exprCompare:
//	exprAddSub
//	| exprAddSub TokPlus exprCompare
//	| exprAddSub TokMinus exprCompare
//	;
//
//exprAddSub:
//	exprMulDivModEtc
//	| exprMulDivModEtc TokOpMulDivMod exprAddSub
//	| exprMulDivModEtc TokOpBitwise exprAddSub
//	;
//
//exprMulDivModEtc:
//	exprPlusUnary
//	| exprMinusUnary
//	| exprLogNot
//	| exprBitNot
//	| exprCastUnsgn
//	| exprCastSgn
//	| exprClog2
//	//| exprPow
//	| numExpr
//	| identExpr
//	| '(' expr ')'
//	;

//// Expressions
//TokOpLogical: ('&&' | '||') ;
//TokOpCompare: ('==' | '!=' | '<' | '>' | '<=' | '>=') ;
//TokPlus: '+' ;
//TokMinus: '-' ;
//TokOpMulDivMod: ('*' | '/' | '%') ;
//TokOpBitwise: ('&' | '|' | '^' | '<<' | '>>' | '>>>') ;
//TokBitInvert: '~' ;

ExprBase:
	noinitvar ExprValue value;
ExprBinopBase, ExprBase:
	child left, right;
ExprUnopBase, ExprBase:
	child child;

ExprBinopLogAnd, ExprBinopBase:
ExprBinopLogOr, ExprBinopBase:

ExprBinopCmpEq, ExprBinopBase:
ExprBinopCmpNe, ExprBinopBase:
ExprBinopCmpLt, ExprBinopBase:
ExprBinopCmpGt, ExprBinopBase:
ExprBinopCmpLe, ExprBinopBase:
ExprBinopCmpGe, ExprBinopBase:

ExprBinopPlus, ExprBinopBase:
ExprBinopMinus, ExprBinopBase:

ExprBinopMul, ExprBinopBase:
ExprBinopDiv, ExprBinopBase:
ExprBinopMod, ExprBinopBase:

ExprBinopBitAnd, ExprBinopBase:
ExprBinopBitOr, ExprBinopBase:
ExprBinopBitXor, ExprBinopBase:
ExprBinopBitLsl, ExprBinopBase:
ExprBinopBitLsr, ExprBinopBase:
ExprBinopBitAsr, ExprBinopBase:

ExprUnopLogNot, ExprUnopBase:
ExprUnopBitNot, ExprUnopBase:
ExprUnopPlus, ExprUnopBase:
ExprUnopMinus, ExprUnopBase:

ExprUnopDollarUnsgn, ExprUnopBase:
ExprUnopDollarSgn, ExprUnopBase:
ExprUnopDollarIsUnsgn, ExprUnopBase:
ExprUnopDollarIsSgn, ExprUnopBase:
ExprUnopDollarRange, ExprUnopBase:
ExprUnopDollarSize, ExprUnopBase:
ExprUnopDollarMsbpos, ExprUnopBase:
ExprUnopDollarFirst, ExprUnopBase:
ExprUnopDollarLast, ExprUnopBase:
ExprUnopDollarHigh, ExprUnopBase:
ExprUnopDollarLow, ExprUnopBase:
ExprUnopDollarClog2, ExprUnopBase:

ExprBinopDollarPow, ExprBinopBase:

ExprUnopTypeof, ExprUnopBase:
ExprCat, ExprBase:
	child list;
ListCat, List:


ExprRangeAny, ExprBase:
	child expr;
RangeOne:
	child child;
RangeTwo, LeftRightBase:



StmtAnyFor:
	child var, items;
StmtFor, StmtAnyFor
StmtGenerateFor, StmtAnyFor:
	child label;

// generate if (...)
// {
// 	...
// }
// else generate if (...)
// {
// 	...
// }
// else generate
// {
// 	...
// }

StmtAnyIf:
	child cond_expr, stmt_list, else;
StmtAnyElse:
	child stmt_list;

StmtGenerateIf, StmtAnyIf:
StmtGenerateElse, StmtAnyElse:

StmtIf, StmtAnyIf:
StmtElse, StmtAnyElse:

StmtWhile:
	child cond_expr, stmt_list;

StmtBehavAssign, LeftRightBase:
StmtContAssign, LeftRightBase:

StmtLabMemberAccessPublic:
StmtLabMemberAccessProtected:
StmtLabMemberAccessPrivate:

StmtUsing, LeftRightBase:

StmtInstModule:
	child module_ident, inst_ident,
