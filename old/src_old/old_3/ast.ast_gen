Program, List:
Package:
	child ident, scope;
ScopePackage, List:
Module:
	child ident, param_list, port_list, scope;
ScopeModproc, List:
ParamArgTypeSublist:
	initvar bool _param_pack;
	child ident_term_equals_extra_list;
ArgPortSublist:
	initvar string _port_dir;
	child param_arg_var_sublist;
ParamArgVarSublist:
	initvar bool _param_pack;
	child the_typename, ident_term_equals_extra_list;



// Modules are not types, but they can be used generically.
ParamModuleSublist:
	child ident_term_equals_extra_list;

// List of ParamArgVarSublist's or ParamModuleList's
ParamList, List:
ArgList, List:


LeftRightBase:
	child left, right;

// Example:  `i_a_arr[ARR_SIZE]`
// The list is of brackets.  Example of multiple brackets:  `i_a_arr[2][3]`
IdentTerminal, List:
	child ident;

// This represents the `.`, indicating a scope.
IdentMemberAccess:
IdentScopeAccess:

// This is either an expression or a statement.  It can only be an
// expression for non-`void` `func`tions.  It is part of an IdentEtc.
Call:
	child ident_or_ident_terminal, param_inst_list, arg_inst_list;

// A string of identifiers and operations chained together via the `.`
// (scope) operator.
IdentEtc, List:

NumExpr:
	initvar BigNum _n;
SizedNumExpr, NumExpr:
	child size;


// Blank brackets (`[]`) indicate that (a) this pair is on a port
// and (b) that this typename's generics or variable's dimensions are
// determined by what is connected to the port.
// For generics, it is different from when the brackets are left out
// entirely, as that indicates use of purely default values for the
// generics.  For arrays, it is not possible to have them without
// brackets.
// When there is no expression, it indicates that this bracket pair is
// blank.
BracketPair:
	// right is only used when this is a multi-bit slice
	child left, right;
ParenPair:

HasString:
	initvar string _s;

Ident, HasString:
ConstString, HasString:

ScopeBehav, List:

Enum:
	child the_typename, ident, scope, var_list;
ScopeEnum, List:

Class:
	initvar bool _packed;
	child ident, param_list, extends, scope, var_list;
ScopeClass, List:
Extends:
	initvar bool _is_virtual;
	child the_typename;

MemberCallable:
	initvar bool _is_const, _is_virtual, _is_static, _is_ref;
	child callable;

Union:
	child ident, scope, var_list;
ScopeUnion, List:

ParamPossibleTypename:
	child primary, param_inst_list;
NoParamPossibleTypename:
	child primary;
Typeof:
	child expr_or_typename;
TypeRange:
	child range_suffix;
RangeSuffix:

Auto: Void:
Uwire: Swire: Ubit: Sbit:
Ubyte: Sbyte: Ushortint: Sshortint:
Uint: Sint: Ulongint: Slongint:
Self:

PosParamArgInstList, List:
NamedParamArgInstList, List:
OneParamArgInst, LeftRightBase:

ExprBase:
	//noinitvar ExprValue value;
BinopExprBase, ExprBase:
	child left, right;
UnopExprBase, ExprBase:
	child child;

BinopExprLogAnd, BinopExprBase:
BinopExprLogOr, BinopExprBase:

BinopExprCmpEq, BinopExprBase:
BinopExprCmpNe, BinopExprBase:
BinopExprCmpLt, BinopExprBase:
BinopExprCmpGt, BinopExprBase:
BinopExprCmpLe, BinopExprBase:
BinopExprCmpGe, BinopExprBase:

BinopExprPlus, BinopExprBase:
BinopExprMinus, BinopExprBase:

BinopExprMul, BinopExprBase:
BinopExprDiv, BinopExprBase:
BinopExprMod, BinopExprBase:

BinopExprBitAnd, BinopExprBase:
BinopExprBitOr, BinopExprBase:
BinopExprBitXor, BinopExprBase:
BinopExprBitLsl, BinopExprBase:
BinopExprBitLsr, BinopExprBase:
BinopExprBitAsr, BinopExprBase:

UnopExprLogNot, UnopExprBase:
UnopExprBitNot, UnopExprBase:
UnopExprPlus, UnopExprBase:
UnopExprMinus, UnopExprBase:

UnopExprDollarUnsigned, UnopExprBase:
UnopExprDollarSigned, UnopExprBase:
UnopExprDollarIsUnsigned, UnopExprBase:
UnopExprDollarIsSigned, UnopExprBase:
UnopExprDollarRange, UnopExprBase:
UnopExprDollarRevrange, UnopExprBase:
UnopExprDollarSize, UnopExprBase:
UnopExprDollarFirst, UnopExprBase:
UnopExprDollarLast, UnopExprBase:
UnopExprDollarHigh, UnopExprBase:
UnopExprDollarLow, UnopExprBase:
UnopExprDollarClog2, UnopExprBase:

BinopExprDollarPow, BinopExprBase:

PseudoExprDollarBase:
	child child;
PseudoExprDollarPast, PseudoExprDollarBase:
PseudoExprDollarStable, PseudoExprDollarBase:
PseudoExprDollarRose, PseudoExprDollarBase:
PseudoExprDollarFell, PseudoExprDollarBase:
PseudoExprDollarGlobalClock:


UnopExprTypeof, UnopExprBase:
CatExpr, ExprBase:
	child list;
ListCat, List:

ReplExpr, ExprBase:
	child how_much_expr, to_repl_expr;

RangeExprAny, ExprBase:
	child which_range;
RangeOne:
	child child;
RangeTwo, LeftRightBase:




StmtList, List:

AnyForStmt:
	child var, items, scope;
ForStmt, AnyForStmt:
GenerateForStmt, AnyForStmt:
	child label;

// generate if (...)
// {
// 	...
// }
// else generate if (...)
// {
// 	...
// }
//
// ...
//
// else generate
// {
// 	...
// }

IfStmt:
	child cond_expr, scope, else_stmt;

GenerateIfStmt, IfStmt:

WhileStmt:
	child cond_expr, scope;


BehavAssignStmt, LeftRightBase:
ContAssignStmt, LeftRightBase:

MemberAccessPublicStmt:
MemberAccessProtectedStmt:
MemberAccessPrivateStmt:

SwitchStmt:
	child expr, scope;
SwitchzStmt, SwitchStmt:
ExprCaseItem:
	child expr, scope;
DefaultCaseItem:
	child scope;
ScopeSwitch, List:

UsingStmt, LeftRightBase:

InstModuleStmt:
	child module_ident, param_inst_list, inst_ident, arg_inst_list;
ReturnStmt:
	child expr;
DollarResizeStmt:
	child ident_etc, expr;
InitialBlock:
	child scope;
AlwaysCombBlock:
	child scope;
AlwaysBlkBlock:
	child edge_list, scope;
AlwaysFfBlock:
	child edge_list, scope;

AssertStmt:
	child expr;
AssumeStmt:
	child expr;
CoverStmt:
	child expr;
RestrictStmt:
	child expr;
StaticAssertStmt:
	child expr;

PosedgeInst:
	child expr;
NegedgeInst:
	child expr;
EdgeList, List:

DeclCallable:
	child param_list, arg_list, ident_or_op, scope;

DeclFunc, DeclCallable:
	child the_typename;
DeclProc, DeclCallable:
	initvar bool _is_port;
DeclTask, DeclCallable:

IdentTermEqualsExtra:
	child ident_terminal, extra;
IdentTermEqualsExtraList, List:

DeclConstList:
	child the_typename, ident_term_equals_extra_list;
DeclVarList, DeclConstList:
//DeclGenvar, DeclVar:
Modport, List:
	child ident;
ModportSubList:
	initvar string _port_dir;
	child ident_list;
IdentList, List:
