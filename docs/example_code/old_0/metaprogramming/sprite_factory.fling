macro `BASIC_DEF_INIT() =>
	default func init[(), (@to_copy: @const self_t), (to_move: @@self_t),
		(@const ...), (@@...)];

class Vec2<T: type>
{
	x, y: T;
	`BASIC_DEF_INIT();
	default func dest();

	gen for item in ["+", "-"]
	{
		func gen<item>(other: @const self_t) =>
			self_t(x: self.x.gen<item>(other.x),
				y: self.y.gen<item>(other.y))
	}
	gen for item in ["*", "/"]
	{
		func gen<item>(scale: @const T) =>
			self_t(x: self.x.gen<item>(scale), y: self.y.gen<item>(scale))
	}

	default func ["+=", "-="](other: @const self_t);
	default func ["*=", "/="](scale: @const T);
}

base class Sprite
{
	using Ident = u32;
	prot #[vget]# _pos: Vec2<float>;

	prot macro `_GEN_SHARED_STUFF()
	{
		`BASIC_DEF_INIT();
		default dyn func dest();
		dyn func ident(): Ident =>
			tokstrm(Sprite).hierarchy()[self_t].ident()
	}
	`_GEN_SHARED_STUFF();
}

base class Golem extends Sprite =>
	`_GEN_SHARED_STUFF();

base class Robot extends Sprite =>
	`_GEN_SHARED_STUFF();

trait IsSigned<T: type>

base class Factory<T: type, IndexT: type()>
{
	prot #[crget]# _stack: std::stack<
}
