class Point<T: type>
{
	x, y: T;
	default func init(@const ...);
	static func cast<string>(this: @const self_t): result<string, auto> =>
		"(" + (this.x as string) + ", " + (this.y as string) + ")";
}

class Square<T: type>
{
	pos: Point<T>;
	size: size_t;
	default func init(@const ...);
}

class Rectangle<T: type>
{
	pos: Point<T>;
	size: Point<size_t>;
	default func init(@const ...);
}

trait HasPos<T: type>
{
	pos: Point<T>;
}

func show_pos<ConstrainT: type>(shape: @const trait HasPos<ConstrainT>):
	void =>
	stdout.print("Position of my shape: {}\n".format(shape.pos as
		string))!!;
func show_pos<ConstrainT: type, ConcreteT: type(HasPos<ConstrainT>)>
	(shape: @const ConcreteT): void =>
	show_pos<ConstrainT>(shape);

func main(argc: c_int, argv: **char): c_int
{
	show_pos(Square(pos: Point(x: 3 as i32, y: 9 as i32),
		size: 6 as size_t));
	return 0;
}
