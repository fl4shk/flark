base class Vector<T: type>
{
	prot #[crget]# _arr: std::unique_ptr<T, true>;
	prot #[vget]# _size, _capacity: size_t = 0;

	default func init[(), (to_move: @@self_t)];

	// deep copy
	func init(to_copy: @const self_t): result<@auto, variant{type...}>
	{
		self._size = to_copy.size();
		self._capacity = to_copy.capacity();
		//self._arr.reset((new T?[self.capacity()])?)?;
		self._arr.reset(new T[self.capacity()])??;

		for i in range(self.size()) => self._arr[i] = to_copy.arr()[i];

		Ok(self)
	}

	func init(default size: auto): result<@auto, variant{type...}>
		[default ..., self._capacity.init(size)]
	{
		self._arr.reset(new T[to_copy.capacity()])??;

		Ok(self)
	}

	default dyn func dest();
}
