!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/bb4f87cd/
ALIGNAS_REGULAR	liborangepower_src/misc_defines.hpp	/^#define ALIGNAS_REGULAR /;"	kind:d
ASM_COMMENT	liborangepower_src/misc_defines.hpp	/^#define ASM_COMMENT(/;"	kind:d	signature:(stuff)
AnyPrintoutBackend	liborangepower_src/misc_output_classes.hpp	/^class AnyPrintoutBackend$/;"	kind:c	namespace:liborangepower::printout_etc
Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper()$/;"	kind:f	class:liborangepower::containers::Array2dHelper	access:public	signature:()
Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper(Type* s_arr, $/;"	kind:f	class:liborangepower::containers::Array2dHelper	access:public	signature:(Type * s_arr,const Vec2<size_t> & s_size_2d)
Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper(const Array2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::Array2dHelper	access:public	signature:(const Array2dHelper & to_copy)
Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^class Array2dHelper$/;"	kind:c	namespace:liborangepower::containers
ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper()$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:()
ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper(Type* s_arr)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:(Type * s_arr)
ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper(const ArrayCsz2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:(const ArrayCsz2dHelper & to_copy)
ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^class ArrayCsz2dHelper$/;"	kind:c	namespace:liborangepower::containers
ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper()$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	access:public	signature:()
ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper(Type* s_the_array) : _arr(s_the_array)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	access:public	signature:(Type * s_the_array)
ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper(const ArrayCszHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCszHelper	access:public	signature:(const ArrayCszHelper & to_copy)
ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^class ArrayCszHelper$/;"	kind:c	namespace:liborangepower::containers
ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper()$/;"	kind:f	class:liborangepower::containers::ArrayHelper	access:public	signature:()
ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper(Type* s_the_array, size_t s_size)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	access:public	signature:(Type * s_the_array,size_t s_size)
ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper(const ArrayHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayHelper	access:public	signature:(const ArrayHelper & to_copy)
ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^class ArrayHelper$/;"	kind:c	namespace:liborangepower::containers
AstGen	ast_gen_class.cpp	/^AstGen::AstGen(std::vector<string>&& s_filename_vec)$/;"	kind:f	class:AstGen	signature:(std::vector<string> && s_filename_vec)
AstGen	ast_gen_class.hpp	/^	AstGen(std::vector<string>&& s_filename_vec);$/;"	kind:p	class:AstGen	access:public	signature:(std::vector<string> && s_filename_vec)
AstGen	ast_gen_class.hpp	/^class AstGen final : public ParserBase<Lexer>$/;"	kind:c	inherits:ParserBase<Lexer>
AstGen::AstGen	ast_gen_class.cpp	/^AstGen::AstGen(std::vector<string>&& s_filename_vec)$/;"	kind:f	class:AstGen	signature:(std::vector<string> && s_filename_vec)
AstGen::AstGen	ast_gen_class.hpp	/^	AstGen(std::vector<string>&& s_filename_vec);$/;"	kind:p	class:AstGen	access:public	signature:(std::vector<string> && s_filename_vec)
AstGen::Base	ast_gen_class.hpp	/^	using Base = ParserBase<Lexer>;$/;"	kind:t	class:AstGen	typeref:typename:ParserBase<Lexer>	access:public
AstGen::Node	ast_gen_class.hpp	/^	class Node final$/;"	kind:c	class:AstGen	access:public
AstGen::Node::GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN	ast_gen_class.hpp	/^		GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN(Node);$/;"	kind:p	class:AstGen::Node	access:public	signature:(Node)
AstGen::Node::Node	ast_gen_class.hpp	/^		Node() = default;$/;"	kind:p	class:AstGen::Node	access:public	signature:()
AstGen::Node::children	ast_gen_class.hpp	/^		std::vector<string> children;$/;"	kind:m	class:AstGen::Node	typeref:typename:std::vector<string>	access:public
AstGen::Node::children_ident_set	ast_gen_class.hpp	/^		std::set<string> children_ident_set, var_ident_set;$/;"	kind:m	class:AstGen::Node	typeref:typename:std::set<string>	access:public
AstGen::Node::extends	ast_gen_class.hpp	/^		string ident, extends;$/;"	kind:m	class:AstGen::Node	typeref:typename:string	access:public
AstGen::Node::ident	ast_gen_class.hpp	/^		string ident, extends;$/;"	kind:m	class:AstGen::Node	typeref:typename:string	access:public
AstGen::Node::var_ident_set	ast_gen_class.hpp	/^		std::set<string> children_ident_set, var_ident_set;$/;"	kind:m	class:AstGen::Node	typeref:typename:std::set<string>	access:public
AstGen::Node::var_vec	ast_gen_class.hpp	/^		std::vector<Var> var_vec;$/;"	kind:m	class:AstGen::Node	typeref:typename:std::vector<Var>	access:public
AstGen::Node::~Node	ast_gen_class.hpp	/^		~Node() = default;$/;"	kind:p	class:AstGen::Node	access:public	signature:()
AstGen::TokSet	ast_gen_class.hpp	/^	using TokSet = std::set<Tok>;$/;"	kind:t	class:AstGen	typeref:typename:std::set<Tok>	access:public
AstGen::Var	ast_gen_class.hpp	/^	class Var final$/;"	kind:c	class:AstGen	access:public
AstGen::Var::GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN	ast_gen_class.hpp	/^		GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN(Var);$/;"	kind:p	class:AstGen::Var	access:public	signature:(Var)
AstGen::Var::Var	ast_gen_class.hpp	/^		Var() = default;$/;"	kind:p	class:AstGen::Var	access:public	signature:()
AstGen::Var::ident	ast_gen_class.hpp	/^		string type, ident;$/;"	kind:m	class:AstGen::Var	typeref:typename:string	access:public
AstGen::Var::type	ast_gen_class.hpp	/^		string type, ident;$/;"	kind:m	class:AstGen::Var	typeref:typename:string	access:public
AstGen::Var::~Var	ast_gen_class.hpp	/^		~Var() = default;$/;"	kind:p	class:AstGen::Var	access:public	signature:()
AstGen::_check_prefixed_tok_seq	ast_gen_class.hpp	/^	bool _check_prefixed_tok_seq(const TokSet& prefix_set, Tok end)$/;"	kind:f	class:AstGen	typeref:typename:bool	access:private	signature:(const TokSet & prefix_set,Tok end)
AstGen::_expect	ast_gen_class.hpp	/^	inline void _expect(Tok tok, const LexerState& lex_state)$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:(Tok tok,const LexerState & lex_state)
AstGen::_lex_tok	ast_gen_class.hpp	/^	inline auto _lex_tok() const$/;"	kind:f	class:AstGen	typeref:typename:auto	access:private	signature:() const
AstGen::_msg_for_expect	ast_gen_class.hpp	/^	inline std::string _msg_for_expect(Tok tok,$/;"	kind:f	class:AstGen	typeref:typename:std::string	access:private	signature:(Tok tok,const LexerState & lex_state) const
AstGen::_next_lss_tokens	ast_gen_class.hpp	/^	inline void _next_lss_tokens()$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:()
AstGen::_next_tok	ast_gen_class.hpp	/^	inline void _next_tok()$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:()
AstGen::_node_ident_set	ast_gen_class.hpp	/^	std::set<string> _node_ident_set;$/;"	kind:m	class:AstGen	typeref:typename:std::set<string>	access:private
AstGen::_node_vec	ast_gen_class.hpp	/^	std::vector<Node> _node_vec;$/;"	kind:m	class:AstGen	typeref:typename:std::vector<Node>	access:private
AstGen::_parse_child	ast_gen_class.cpp	/^bool AstGen::_parse_child()$/;"	kind:f	class:AstGen	typeref:typename:bool	signature:()
AstGen::_parse_child	ast_gen_class.hpp	/^	bool _parse_child();$/;"	kind:p	class:AstGen	typeref:typename:bool	access:private	signature:()
AstGen::_parse_extends	ast_gen_class.cpp	/^bool AstGen::_parse_extends()$/;"	kind:f	class:AstGen	typeref:typename:bool	signature:()
AstGen::_parse_extends	ast_gen_class.hpp	/^	bool _parse_extends();$/;"	kind:p	class:AstGen	typeref:typename:bool	access:private	signature:()
AstGen::_parse_node	ast_gen_class.cpp	/^bool AstGen::_parse_node()$/;"	kind:f	class:AstGen	typeref:typename:bool	signature:()
AstGen::_parse_node	ast_gen_class.hpp	/^	bool _parse_node();$/;"	kind:p	class:AstGen	typeref:typename:bool	access:private	signature:()
AstGen::_parse_var	ast_gen_class.cpp	/^bool AstGen::_parse_var()$/;"	kind:f	class:AstGen	typeref:typename:bool	signature:()
AstGen::_parse_var	ast_gen_class.hpp	/^	bool _parse_var();$/;"	kind:p	class:AstGen	typeref:typename:bool	access:private	signature:()
AstGen::_to_next_in_list	ast_gen_class.hpp	/^	inline bool _to_next_in_list(Tok end, Tok separator=Tok::Comma)$/;"	kind:f	class:AstGen	typeref:typename:bool	access:private	signature:(Tok end,Tok separator=Tok::Comma)
AstGen::_unexpected	ast_gen_class.hpp	/^	inline void _unexpected(Lexer* lexer)$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:(Lexer * lexer)
AstGen::_unexpected	ast_gen_class.hpp	/^	inline void _unexpected(const LexerState& lex_state)$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:(const LexerState & lex_state)
AstGen::node_base_str	ast_gen_class.cpp	/^const string AstGen::node_base_str$/;"	kind:m	class:AstGen	typeref:typename:const string
AstGen::node_base_str	ast_gen_class.hpp	/^	static const string node_base_str, node_list_str;$/;"	kind:m	class:AstGen	typeref:typename:const string	access:public
AstGen::node_list_str	ast_gen_class.cpp	/^const string AstGen::node_list_str$/;"	kind:m	class:AstGen	typeref:typename:const string
AstGen::node_list_str	ast_gen_class.hpp	/^	static const string node_base_str, node_list_str;$/;"	kind:m	class:AstGen	typeref:typename:const string	access:public
AstGen::run	ast_gen_class.cpp	/^void AstGen::run()$/;"	kind:f	class:AstGen	typeref:typename:void	signature:()
AstGen::run	ast_gen_class.hpp	/^	void run();$/;"	kind:p	class:AstGen	typeref:typename:void	access:public	signature:()
AstGen::~AstGen	ast_gen_class.cpp	/^AstGen::~AstGen()$/;"	kind:f	class:AstGen	signature:()
AstGen::~AstGen	ast_gen_class.hpp	/^	~AstGen();$/;"	kind:p	class:AstGen	typeref:typename:AstGen	access:public	signature:()
BPRANGE2MASK	liborangepower_src/misc_defines.hpp	/^#define BPRANGE2MASK(/;"	kind:d	signature:(bit_pos_hi,bit_pos_lo)
BPRANGE2SHIFTED_MASK	liborangepower_src/misc_defines.hpp	/^#define BPRANGE2SHIFTED_MASK(/;"	kind:d	signature:(bit_pos_hi,bit_pos_lo)
Base	ast_gen_class.hpp	/^	using Base = ParserBase<Lexer>;$/;"	kind:t	class:AstGen	typeref:typename:ParserBase<Lexer>	access:public
BigNum	liborangepower_src/gmp_stuff.hpp	/^typedef mpz_class BigNum;$/;"	kind:t	namespace:liborangepower::bignum	typeref:typename:mpz_class
CircLinkedList	liborangepower_src/linked_list_classes.hpp	/^	inline CircLinkedList()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	access:public	signature:()
CircLinkedList	liborangepower_src/linked_list_classes.hpp	/^class CircLinkedList$/;"	kind:c	namespace:liborangepower::containers
Colon	ast_gen_class.hpp	/^	Colon,$/;"	kind:e	enum:Tok	access:public
Comma	ast_gen_class.hpp	/^	Comma,$/;"	kind:e	enum:Tok	access:public
Comment	ast_gen_class.hpp	/^	Comment,$/;"	kind:e	enum:Tok	access:public
DidQuitWithMiscOutput	liborangepower_src/mpi_handler_class.hpp	/^		DidQuitWithMiscOutput,$/;"	kind:e	enum:liborangepower::mpi::MpiHandler::ErrorCode	access:public
Done	ast_gen_class.hpp	/^	Done,$/;"	kind:e	enum:Tok	access:public
ErrorCode	liborangepower_src/mpi_handler_class.hpp	/^	enum class ErrorCode : int$/;"	kind:g	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public
FakeError	liborangepower_src/mpi_handler_class.hpp	/^		FakeError,$/;"	kind:e	enum:liborangepower::mpi::MpiHandler::ErrorCode	access:public
GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(/;"	kind:d	signature:(Type)
GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/linked_list_classes.hpp	/^		GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(Node);$/;"	kind:p	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:(Node)
GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/linked_list_classes.hpp	/^		GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(NodeIterator);$/;"	kind:p	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:(NodeIterator)
GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/prev_curr_pair_classes.hpp	/^	GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(PrevCurrPair);$/;"	kind:p	class:liborangepower::containers::PrevCurrPair	access:public	signature:(PrevCurrPair)
GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/vec2_classes.hpp	/^	GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(Vec2);$/;"	kind:p	class:liborangepower::containers::Vec2	access:public	signature:(Vec2)
GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	src_code_chunk_class.hpp	/^	GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(SrcCodeChunk);$/;"	kind:p	class:frost_hdl::SrcCodeChunk	access:public	signature:(SrcCodeChunk)
GEN_COPY_ONLY_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_COPY_ONLY_CONSTRUCTORS_AND_ASSIGN(/;"	kind:d	signature:(Type)
GEN_GENERIC_CM_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GENERIC_CM_CONSTRUCTORS_AND_ASSIGN(/;"	kind:d	signature:(Type,copy_dd,move_dd)
GEN_GENERIC_GETTER_AS_POINTER	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GENERIC_GETTER_AS_POINTER(/;"	kind:d	signature:(prefix,suffix)
GEN_GENERIC_GETTER_BY_CON_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GENERIC_GETTER_BY_CON_REF(/;"	kind:d	signature:(prefix,suffix)
GEN_GENERIC_GETTER_BY_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GENERIC_GETTER_BY_REF(/;"	kind:d	signature:(prefix,suffix)
GEN_GENERIC_GETTER_BY_VAL	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GENERIC_GETTER_BY_VAL(/;"	kind:d	signature:(prefix,suffix)
GEN_GENERIC_SETTER_BY_CON_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GENERIC_SETTER_BY_CON_REF(/;"	kind:d	signature:(prefix,suffix)
GEN_GENERIC_SETTER_BY_RVAL_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GENERIC_SETTER_BY_RVAL_REF(/;"	kind:d	signature:(prefix,suffix)
GEN_GENERIC_SETTER_BY_VAL	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GENERIC_SETTER_BY_VAL(/;"	kind:d	signature:(prefix,suffix)
GEN_GETTERS_BY_CON_REF_AND_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GETTERS_BY_CON_REF_AND_REF(/;"	kind:d	signature:(suffix)
GEN_GETTER_AND_SETTER_BY_CON_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GETTER_AND_SETTER_BY_CON_REF(/;"	kind:d	signature:(stuff)
GEN_GETTER_AND_SETTER_BY_VAL	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GETTER_AND_SETTER_BY_VAL(/;"	kind:d	signature:(stuff)
GEN_GETTER_AS_POINTER	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GETTER_AS_POINTER(/;"	kind:d	signature:(suffix)
GEN_GETTER_BY_CON_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GETTER_BY_CON_REF(/;"	kind:d	signature:(suffix)
GEN_GETTER_BY_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GETTER_BY_REF(/;"	kind:d	signature:(suffix)
GEN_GETTER_BY_VAL	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_GETTER_BY_VAL(/;"	kind:d	signature:(suffix)
GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN	ast_gen_class.hpp	/^		GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN(Node);$/;"	kind:p	class:AstGen::Node	access:public	signature:(Node)
GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN	ast_gen_class.hpp	/^		GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN(Var);$/;"	kind:p	class:AstGen::Var	access:public	signature:(Var)
GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN(/;"	kind:d	signature:(Type)
GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/prev_curr_pair_classes.hpp	/^	GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN(MoveOnlyPrevCurrPair);$/;"	kind:p	class:liborangepower::containers::MoveOnlyPrevCurrPair	access:public	signature:(MoveOnlyPrevCurrPair)
GEN_NO_CM_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_NO_CM_CONSTRUCTORS_AND_ASSIGN(/;"	kind:d	signature:(Type)
GEN_SETTER_BY_CON_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_SETTER_BY_CON_REF(/;"	kind:d	signature:(suffix)
GEN_SETTER_BY_RVAL_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_SETTER_BY_RVAL_REF(/;"	kind:d	signature:(suffix)
GEN_SETTER_BY_VAL	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_SETTER_BY_VAL(/;"	kind:d	signature:(suffix)
GEN_STATIC_GENERIC_GETTER_BY_CON_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_GENERIC_GETTER_BY_CON_REF(/;"	kind:d	signature:(prefix,suffix)
GEN_STATIC_GENERIC_GETTER_BY_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_GENERIC_GETTER_BY_REF(/;"	kind:d	signature:(prefix,suffix)
GEN_STATIC_GENERIC_GETTER_BY_VAL	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_GENERIC_GETTER_BY_VAL(/;"	kind:d	signature:(prefix,suffix)
GEN_STATIC_GENERIC_SETTER_BY_CON_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_GENERIC_SETTER_BY_CON_REF(/;"	kind:d	signature:(prefix,suffix)
GEN_STATIC_GENERIC_SETTER_BY_RVAL_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_GENERIC_SETTER_BY_RVAL_REF(/;"	kind:d	signature:(prefix,suffix)
GEN_STATIC_GENERIC_SETTER_BY_VAL	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_GENERIC_SETTER_BY_VAL(/;"	kind:d	signature:(prefix,suffix)
GEN_STATIC_GETTER_BY_CON_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_GETTER_BY_CON_REF(/;"	kind:d	signature:(suffix)
GEN_STATIC_GETTER_BY_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_GETTER_BY_REF(/;"	kind:d	signature:(suffix)
GEN_STATIC_GETTER_BY_VAL	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_GETTER_BY_VAL(/;"	kind:d	signature:(suffix)
GEN_STATIC_SETTER_BY_CON_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_SETTER_BY_CON_REF(/;"	kind:d	signature:(suffix)
GEN_STATIC_SETTER_BY_RVAL_REF	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_SETTER_BY_RVAL_REF(/;"	kind:d	signature:(suffix)
GEN_STATIC_SETTER_BY_VAL	liborangepower_src/gen_class_innards_defines.hpp	/^#define GEN_STATIC_SETTER_BY_VAL(/;"	kind:d	signature:(suffix)
INNER_TOKENPASTE1	liborangepower_src/misc_defines.hpp	/^#define INNER_TOKENPASTE1(/;"	kind:d	signature:(x)
INNER_TOKENPASTE2	liborangepower_src/misc_defines.hpp	/^#define INNER_TOKENPASTE2(/;"	kind:d	signature:(x,y)
Ident	ast_gen_class.hpp	/^	Ident,$/;"	kind:e	enum:Tok	access:public
InstanceType	liborangepower_src/time_stuff.hpp	/^	typedef std::mt19937_64 InstanceType;$/;"	kind:t	class:liborangepower::time::Prng	typeref:typename:std::mt19937_64	access:public
LexStateSets	liborangepower_src/parser_base_class.hpp	/^		LexStateSets()$/;"	kind:f	class:liborangepower::lang::ParserBase::LexStateSets	access:public	signature:()
LexStateSets	liborangepower_src/parser_base_class.hpp	/^	class LexStateSets final$/;"	kind:c	class:liborangepower::lang::ParserBase	access:public
Lexer	ast_gen_class.hpp	/^	Lexer(const string& s_filename, string* s_text);$/;"	kind:p	class:Lexer	access:public	signature:(const string & s_filename,string * s_text)
Lexer	ast_gen_class.hpp	/^class Lexer final : public LexerBase<Tok>$/;"	kind:c	inherits:LexerBase<Tok>
Lexer::Lexer	ast_gen_class.hpp	/^	Lexer(const string& s_filename, string* s_text);$/;"	kind:p	class:Lexer	access:public	signature:(const string & s_filename,string * s_text)
Lexer::_inner_next_tok	ast_gen_class.cpp	/^void Lexer::_inner_next_tok()$/;"	kind:f	class:Lexer	typeref:typename:void	signature:()
Lexer::_inner_next_tok	ast_gen_class.hpp	/^	void _inner_next_tok();$/;"	kind:p	class:Lexer	typeref:typename:void	access:private	signature:()
Lexer::next_tok	ast_gen_class.cpp	/^Tok Lexer::next_tok(bool just_test)$/;"	kind:f	class:Lexer	typeref:typename:Tok	signature:(bool just_test)
Lexer::next_tok	ast_gen_class.hpp	/^	Tok next_tok(bool just_test);$/;"	kind:p	class:Lexer	typeref:typename:Tok	access:public	signature:(bool just_test)
Lexer::src_code_chunk	ast_gen_class.hpp	/^	inline auto src_code_chunk(State* state=nullptr) const$/;"	kind:f	class:Lexer	typeref:typename:auto	access:public	signature:(State * state=nullptr) const
Lexer::~Lexer	ast_gen_class.hpp	/^	~Lexer();$/;"	kind:p	class:Lexer	typeref:typename:Lexer	access:public	signature:()
LexerBase	liborangepower_src/lexer_base_class.hpp	/^	inline LexerBase(const std::string& s_filename, std::string* s_text,$/;"	kind:f	class:liborangepower::lang::LexerBase	access:public	signature:(const std::string & s_filename,std::string * s_text,TokType done_tok,TokType comment_tok)
LexerBase	liborangepower_src/lexer_base_class.hpp	/^class LexerBase$/;"	kind:c	namespace:liborangepower::lang
LexerState	liborangepower_src/parser_base_class.hpp	/^	using LexerState = typename LexerType::State;$/;"	kind:t	class:liborangepower::lang::ParserBase	typeref:typename:LexerType::State	access:public
MP11_DECLARE_IDENT_STATIC_VARS	liborangepower_src/mp11_defines.hpp	/^#define MP11_DECLARE_IDENT_STATIC_VARS /;"	kind:d
MP11_DEFINE_IDENT_STATIC_VARS	liborangepower_src/mp11_defines.hpp	/^#define MP11_DEFINE_IDENT_STATIC_VARS(/;"	kind:d	signature:(some_class,hierarchy_list)
MP11_MAKE_BASE_CLASS_ARR_GETTER_INSIDES	liborangepower_src/mp11_defines.hpp	/^#define MP11_MAKE_BASE_CLASS_ARR_GETTER_INSIDES /;"	kind:d
MP11_MAKE_BASE_CLASS_ARR_GETTER_OUTSIDES	liborangepower_src/mp11_defines.hpp	/^	hierarchy_list) \\$/;"	kind:d	signature:(some_class,\\\nhierarchy_list)
MP11_MAKE_BASE_CLASS_ESSENTIAL_INSIDES	liborangepower_src/mp11_defines.hpp	/^#define MP11_MAKE_BASE_CLASS_ESSENTIAL_INSIDES /;"	kind:d
MP11_MAKE_BASE_CLASS_ESSENTIAL_OUTSIDES	liborangepower_src/mp11_defines.hpp	/^	hierarchy_list) \\$/;"	kind:d	signature:(base_class,\\\nhierarchy_list)
MP11_MAKE_BASE_CLASS_INSIDES	liborangepower_src/mp11_defines.hpp	/^#define MP11_MAKE_BASE_CLASS_INSIDES /;"	kind:d
MPI_HANDLER_STATIC_ASSERT_0	liborangepower_src/mpi_handler_class.hpp	/^#define MPI_HANDLER_STATIC_ASSERT_0(/;"	kind:d	signature:(type,func_name_str)
MPI_HANDLER_STATIC_ASSERT_1	liborangepower_src/mpi_handler_class.hpp	/^#define MPI_HANDLER_STATIC_ASSERT_1(/;"	kind:d	signature:(type,func_name_str)
MoveOnlyPrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline MoveOnlyPrevCurrPair() = default;$/;"	kind:p	class:liborangepower::containers::MoveOnlyPrevCurrPair	access:public	signature:()
MoveOnlyPrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^class MoveOnlyPrevCurrPair$/;"	kind:c	namespace:liborangepower::containers
MpiHandler	liborangepower_src/mpi_handler_class.hpp	/^	inline MpiHandler(int& s_argc, char** s_argv,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	access:public	signature:(int & s_argc,char ** s_argv,size_t s_num_threads_per_proc=1,size_t s_min_world_size=1)
MpiHandler	liborangepower_src/mpi_handler_class.hpp	/^class MpiHandler$/;"	kind:c	namespace:liborangepower::mpi
Node	ast_gen_class.hpp	/^		Node() = default;$/;"	kind:p	class:AstGen::Node	access:public	signature:()
Node	ast_gen_class.hpp	/^	class Node final$/;"	kind:c	class:AstGen	access:public
Node	liborangepower_src/linked_list_classes.hpp	/^		Node() = default;$/;"	kind:p	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:()
Node	liborangepower_src/linked_list_classes.hpp	/^		inline Node(Type&& s_data)$/;"	kind:f	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:(Type && s_data)
Node	liborangepower_src/linked_list_classes.hpp	/^		inline Node(const Type& s_data)$/;"	kind:f	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:(const Type & s_data)
Node	liborangepower_src/linked_list_classes.hpp	/^	class Node final$/;"	kind:c	class:liborangepower::containers::CircLinkedList	access:public
NodeIterator	liborangepower_src/linked_list_classes.hpp	/^		NodeIterator() = default;$/;"	kind:p	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:()
NodeIterator	liborangepower_src/linked_list_classes.hpp	/^		inline NodeIterator(Node* s_node)$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:(Node * s_node)
NodeIterator	liborangepower_src/linked_list_classes.hpp	/^	class NodeIterator final$/;"	kind:c	class:liborangepower::containers::CircLinkedList	access:public
ParserBase	liborangepower_src/parser_base_class.hpp	/^	ParserBase(std::vector<std::string>&& s_filename_vec)$/;"	kind:f	class:liborangepower::lang::ParserBase	access:public	signature:(std::vector<std::string> && s_filename_vec)
ParserBase	liborangepower_src/parser_base_class.hpp	/^class ParserBase$/;"	kind:c	namespace:liborangepower::lang
PrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline PrevCurrPair() = default;$/;"	kind:p	class:liborangepower::containers::PrevCurrPair	access:public	signature:()
PrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^class PrevCurrPair$/;"	kind:c	namespace:liborangepower::containers
Prng	liborangepower_src/time_stuff.hpp	/^	inline Prng(SeedType s_seed)$/;"	kind:f	class:liborangepower::time::Prng	access:public	signature:(SeedType s_seed)
Prng	liborangepower_src/time_stuff.hpp	/^	inline Prng(int s_param_0=0, int s_param_1=0) $/;"	kind:f	class:liborangepower::time::Prng	access:public	signature:(int s_param_0=0,int s_param_1=0)
Prng	liborangepower_src/time_stuff.hpp	/^class Prng$/;"	kind:c	namespace:liborangepower::time
Profiler	liborangepower_src/time_stuff.hpp	/^class Profiler$/;"	kind:c	namespace:liborangepower::time
SeedType	liborangepower_src/time_stuff.hpp	/^		.time_since_epoch().count()) SeedType;$/;"	kind:t	class:liborangepower::time::Prng	access:public
Semicolon	ast_gen_class.hpp	/^	Semicolon,$/;"	kind:e	enum:Tok	access:public
SizeTooBig	liborangepower_src/mpi_handler_class.hpp	/^		SizeTooBig,$/;"	kind:e	enum:liborangepower::mpi::MpiHandler::ErrorCode	access:public
SrcCodeChunk	src_code_chunk_class.cpp	/^SrcCodeChunk::SrcCodeChunk()$/;"	kind:f	class:frost_hdl::SrcCodeChunk	signature:()
SrcCodeChunk	src_code_chunk_class.cpp	/^SrcCodeChunk::SrcCodeChunk(const string& s_filename,$/;"	kind:f	class:frost_hdl::SrcCodeChunk	signature:(const string & s_filename,const string & s_text,size_t s_src_line_num,size_t s_src_pos_in_line)
SrcCodeChunk	src_code_chunk_class.hpp	/^	SrcCodeChunk();$/;"	kind:p	class:frost_hdl::SrcCodeChunk	access:public	signature:()
SrcCodeChunk	src_code_chunk_class.hpp	/^	explicit SrcCodeChunk(const string& s_filename,$/;"	kind:p	class:frost_hdl::SrcCodeChunk	access:public	signature:(const string & s_filename,const string & s_text,size_t s_src_line_num,size_t s_src_pos_in_line)
SrcCodeChunk	src_code_chunk_class.hpp	/^class SrcCodeChunk$/;"	kind:c	namespace:frost_hdl
State	liborangepower_src/lexer_base_class.hpp	/^		State()$/;"	kind:f	class:liborangepower::lang::LexerBase::State	access:public	signature:()
State	liborangepower_src/lexer_base_class.hpp	/^	class State$/;"	kind:c	class:liborangepower::lang::LexerBase	access:public
TOKENPASTE1	liborangepower_src/misc_defines.hpp	/^#define TOKENPASTE1(/;"	kind:d	signature:(x)
TOKENPASTE2	liborangepower_src/misc_defines.hpp	/^#define TOKENPASTE2(/;"	kind:d	signature:(x,y)
TOKENPASTE3	liborangepower_src/misc_defines.hpp	/^#define TOKENPASTE3(/;"	kind:d	signature:(x,y,z)
TOKENPASTE4	liborangepower_src/misc_defines.hpp	/^#define TOKENPASTE4(/;"	kind:d	signature:(x,y,z,w)
Temp0	liborangepower_src/misc_output_classes.hpp	/^			Temp0;$/;"	kind:t	function:liborangepower::printout_etc::AnyPrintoutBackend::func
Temp1	liborangepower_src/misc_output_classes.hpp	/^		typedef typename std::remove_const<Temp0>::type Temp1;$/;"	kind:t	function:liborangepower::printout_etc::AnyPrintoutBackend::func	typeref:typename:std::remove_const<Temp0>::type
Tok	ast_gen_class.hpp	/^enum class Tok$/;"	kind:g
TokSet	ast_gen_class.hpp	/^	using TokSet = std::set<Tok>;$/;"	kind:t	class:AstGen	typeref:typename:std::set<Tok>	access:public
TokToStringMap	liborangepower_src/parser_base_class.hpp	/^	using TokToStringMap = std::map<TokType, std::string>;$/;"	kind:t	class:liborangepower::lang::ParserBase	typeref:typename:std::map<TokType,std::string>	access:public
TokType	liborangepower_src/lexer_base_class.hpp	/^	using TokType = _TokType;$/;"	kind:t	class:liborangepower::lang::LexerBase	typeref:typename:_TokType	access:public
TokType	liborangepower_src/parser_base_class.hpp	/^	using TokType = typename LexerType::TokType;$/;"	kind:t	class:liborangepower::lang::ParserBase	typeref:typename:LexerType::TokType	access:public
TooFewProcs	liborangepower_src/mpi_handler_class.hpp	/^		TooFewProcs,$/;"	kind:e	enum:liborangepower::mpi::MpiHandler::ErrorCode	access:public
Unknown	ast_gen_class.hpp	/^	Unknown,$/;"	kind:e	enum:Tok	access:public
Var	ast_gen_class.hpp	/^		Var() = default;$/;"	kind:p	class:AstGen::Var	access:public	signature:()
Var	ast_gen_class.hpp	/^	class Var final$/;"	kind:c	class:AstGen	access:public
Vec2	liborangepower_src/vec2_classes.hpp	/^	inline Vec2() = default;$/;"	kind:p	class:liborangepower::containers::Vec2	access:public	signature:()
Vec2	liborangepower_src/vec2_classes.hpp	/^	inline Vec2(const Type& s_x, const Type& s_y)$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:(const Type & s_x,const Type & s_y)
Vec2	liborangepower_src/vec2_classes.hpp	/^class Vec2$/;"	kind:c	namespace:liborangepower::containers
WIDTH2MP	liborangepower_src/misc_defines.hpp	/^#define WIDTH2MP(/;"	kind:d	signature:(some_width)
_ALIGN2	liborangepower_src/misc_defines.hpp	/^#define _ALIGN2 /;"	kind:d
_ALIGN4	liborangepower_src/misc_defines.hpp	/^#define _ALIGN4 /;"	kind:d
__anon12bbe81d0102	liborangepower_src/json_stuff/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::parse_json	typeref:typename:bool	file:	signature:(Json::CharReaderBuilder& actual_rbuilder)
__anon12bbe81d0202	liborangepower_src/json_stuff/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::write_json	file:	signature:(Json::StreamWriterBuilder& some_wbuilder)
__anon12bbe81d0302	liborangepower_src/json_stuff/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::debug_print_json	typeref:typename:void	file:	signature:()
__anon12bbe81d0402	liborangepower_src/json_stuff/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::debug_print_json	typeref:typename:void	file:	signature:()
__anon12bbe81d0502	liborangepower_src/json_stuff/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::debug_print_json	typeref:typename:void	file:	signature:()
__anon12bbe81d0602	liborangepower_src/json_stuff/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::debug_print_json	typeref:typename:void	file:	signature:()
__anon338059ed0102	liborangepower_src/parser_base_class.hpp	/^			{$/;"	kind:f	function:liborangepower::lang::ParserBase::_check_prefixed_tok_seq	typeref:typename:void	file:	signature:()
_argc_ptr	liborangepower_src/mpi_handler_class.hpp	/^	int* _argc_ptr;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:int *	access:protected
_argv_ptr	liborangepower_src/mpi_handler_class.hpp	/^	char*** _argv_ptr;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:char ***	access:protected
_arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* _arr = nullptr;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:Type *	access:protected
_arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* _arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type *	access:protected
_arr	liborangepower_src/array_helper_classes.hpp	/^	Type* _arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayCszHelper	typeref:typename:Type *	access:public
_arr	liborangepower_src/array_helper_classes.hpp	/^	Type* _arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayHelper	typeref:typename:Type *	access:protected
_c	liborangepower_src/lexer_base_class.hpp	/^		int _c;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:int	access:private
_check_prefixed_tok_seq	ast_gen_class.hpp	/^	bool _check_prefixed_tok_seq(const TokSet& prefix_set, Tok end)$/;"	kind:f	class:AstGen	typeref:typename:bool	access:private	signature:(const TokSet & prefix_set,Tok end)
_check_prefixed_tok_seq	liborangepower_src/parser_base_class.hpp	/^	bool _check_prefixed_tok_seq(const std::set<TokType>& prefix_set,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:protected	signature:(const std::set<TokType> & prefix_set,TokType end)
_curr	liborangepower_src/prev_curr_pair_classes.hpp	/^	Type _prev, _curr;$/;"	kind:m	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:Type	access:protected
_curr	liborangepower_src/prev_curr_pair_classes.hpp	/^	Type _prev, _curr;$/;"	kind:m	class:liborangepower::containers::PrevCurrPair	typeref:typename:Type	access:protected
_curr_file_index	liborangepower_src/parser_base_class.hpp	/^	size_t _curr_file_index = 0;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:size_t	access:protected
_default_initial_seed	liborangepower_src/time_stuff.hpp	/^	inline SeedType _default_initial_seed()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:SeedType	access:protected	signature:()
_do_one_level_parse	liborangepower_src/parser_base_class.hpp	/^	bool _do_one_level_parse(FirstFuncType&& first_func,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:protected	signature:(FirstFuncType && first_func,RemFuncTypes &&...rem_funcs)
_eat_whitespace	liborangepower_src/lexer_base_class.hpp	/^	void _eat_whitespace()$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:void	access:protected	signature:()
_err	liborangepower_src/parser_base_class.hpp	/^	inline void _err(ArgTypes&&... args) const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(ArgTypes &&...args) const
_err	liborangepower_src/parser_base_class.hpp	/^	inline void _err(const LexerState* lex_state, ArgTypes&&... args)$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const LexerState * lex_state,ArgTypes &&...args)
_expect	ast_gen_class.hpp	/^	inline void _expect(Tok tok, const LexerState& lex_state)$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:(Tok tok,const LexerState & lex_state)
_expect	liborangepower_src/parser_base_class.hpp	/^	void _expect(TokType tok, const TokToStringMap& some_tok_ident_map,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(TokType tok,const TokToStringMap & some_tok_ident_map,const LexerState & lex_state)
_filename	liborangepower_src/lexer_base_class.hpp	/^	std::string _filename;$/;"	kind:m	class:liborangepower::lang::LexerBase	typeref:typename:std::string	access:protected
_filename	src_code_chunk_class.hpp	/^	string _filename;$/;"	kind:m	class:frost_hdl::SrcCodeChunk	typeref:typename:string	access:private
_filename_vec	liborangepower_src/parser_base_class.hpp	/^	std::vector<std::string> _filename_vec;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:std::vector<std::string>	access:protected
_head	liborangepower_src/linked_list_classes.hpp	/^	Node _head;$/;"	kind:m	class:liborangepower::containers::CircLinkedList	typeref:typename:Node	access:private
_init_array_backend	liborangepower_src/misc_utility_funcs.hpp	/^inline void _init_array_backend(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const Type & first_value,const RemainingTypes &...remaining_values)
_init_array_backend	liborangepower_src/misc_utility_funcs.hpp	/^inline void _init_array_backend(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const Type & to_copy)
_inner_insert_after	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator _inner_insert_after(Node* where, Node* what)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:private	signature:(Node * where,Node * what)
_inner_insert_before	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator _inner_insert_before(Node* where, Node* what)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:private	signature:(Node * where,Node * what)
_inner_next_tok	ast_gen_class.cpp	/^void Lexer::_inner_next_tok()$/;"	kind:f	class:Lexer	typeref:typename:void	signature:()
_inner_next_tok	ast_gen_class.hpp	/^	void _inner_next_tok();$/;"	kind:p	class:Lexer	typeref:typename:void	access:private	signature:()
_inner_next_tok	liborangepower_src/lexer_base_class.hpp	/^	virtual void _inner_next_tok() = 0;$/;"	kind:p	class:liborangepower::lang::LexerBase	typeref:typename:void	access:protected	signature:()
_instance	liborangepower_src/time_stuff.hpp	/^	InstanceType _instance;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:InstanceType	access:protected
_just_test	liborangepower_src/parser_base_class.hpp	/^	bool _just_test = false;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:protected
_lex_state	liborangepower_src/parser_base_class.hpp	/^	const LexerState& _lex_state() const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:const LexerState &	access:protected	signature:() const
_lex_tok	ast_gen_class.hpp	/^	inline auto _lex_tok() const$/;"	kind:f	class:AstGen	typeref:typename:auto	access:private	signature:() const
_lexer	liborangepower_src/parser_base_class.hpp	/^	LexerType& _lexer()$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:LexerType &	access:protected	signature:()
_lexer	liborangepower_src/parser_base_class.hpp	/^	const LexerType& _lexer() const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:const LexerType &	access:protected	signature:() const
_lexer_vec	liborangepower_src/parser_base_class.hpp	/^	std::vector<LexerType> _lexer_vec;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:std::vector<LexerType>	access:protected
_line_num	liborangepower_src/lexer_base_class.hpp	/^		size_t _x = 0, _line_num = 1, _pos_in_line = 0;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:size_t	access:private
_lss	liborangepower_src/parser_base_class.hpp	/^	LexStateSets _lss;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:LexStateSets	access:protected
_min_world_size	liborangepower_src/mpi_handler_class.hpp	/^	size_t _num_threads_per_proc, _min_world_size;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:size_t	access:protected
_msg_for_expect	ast_gen_class.hpp	/^	inline std::string _msg_for_expect(Tok tok,$/;"	kind:f	class:AstGen	typeref:typename:std::string	access:private	signature:(Tok tok,const LexerState & lex_state) const
_msg_for_expect	liborangepower_src/parser_base_class.hpp	/^	std::string _msg_for_expect(TokType tok,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:std::string	access:protected	signature:(TokType tok,const TokToStringMap & some_tok_ident_map,const LexerState & lex_state) const
_n	liborangepower_src/lexer_base_class.hpp	/^		bignum::BigNum _n;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:bignum::BigNum	access:private
_next	liborangepower_src/linked_list_classes.hpp	/^		Node * _next = nullptr, * _prev = nullptr;$/;"	kind:m	class:liborangepower::containers::CircLinkedList::Node	typeref:typename:Node *	access:private
_next_char	liborangepower_src/lexer_base_class.hpp	/^	int _next_char()$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:int	access:protected	signature:()
_next_lss_tokens	ast_gen_class.hpp	/^	inline void _next_lss_tokens()$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:()
_next_lss_tokens	liborangepower_src/parser_base_class.hpp	/^	inline void _next_lss_tokens(const TokToStringMap& some_tok_ident_map)$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const TokToStringMap & some_tok_ident_map)
_next_n_tokens	liborangepower_src/parser_base_class.hpp	/^	const std::vector<LexerState> _next_n_tokens(size_t n,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:const std::vector<LexerState>	access:protected	signature:(size_t n,bool affect_lexer)
_next_tok	ast_gen_class.hpp	/^	inline void _next_tok()$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:()
_next_tok	liborangepower_src/parser_base_class.hpp	/^	inline auto _next_tok(LexerType* lexer=nullptr)$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:auto	access:protected	signature:(LexerType * lexer=nullptr)
_next_tok_no_test	liborangepower_src/lexer_base_class.hpp	/^	TokType _next_tok_no_test(TokType done_tok, TokType comment_tok)$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:TokType	access:protected	signature:(TokType done_tok,TokType comment_tok)
_node	liborangepower_src/linked_list_classes.hpp	/^		Node* _node = nullptr;$/;"	kind:m	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:Node *	access:private
_node_ident_set	ast_gen_class.hpp	/^	std::set<string> _node_ident_set;$/;"	kind:m	class:AstGen	typeref:typename:std::set<string>	access:private
_node_vec	ast_gen_class.hpp	/^	std::vector<Node> _node_vec;$/;"	kind:m	class:AstGen	typeref:typename:std::vector<Node>	access:private
_num_threads_per_proc	liborangepower_src/mpi_handler_class.hpp	/^	size_t _num_threads_per_proc, _min_world_size;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:size_t	access:protected
_param_0	liborangepower_src/time_stuff.hpp	/^	int _param_0, _param_1;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:int	access:protected
_param_1	liborangepower_src/time_stuff.hpp	/^	int _param_0, _param_1;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:int	access:protected
_parse_child	ast_gen_class.cpp	/^bool AstGen::_parse_child()$/;"	kind:f	class:AstGen	typeref:typename:bool	signature:()
_parse_child	ast_gen_class.hpp	/^	bool _parse_child();$/;"	kind:p	class:AstGen	typeref:typename:bool	access:private	signature:()
_parse_extends	ast_gen_class.cpp	/^bool AstGen::_parse_extends()$/;"	kind:f	class:AstGen	typeref:typename:bool	signature:()
_parse_extends	ast_gen_class.hpp	/^	bool _parse_extends();$/;"	kind:p	class:AstGen	typeref:typename:bool	access:private	signature:()
_parse_node	ast_gen_class.cpp	/^bool AstGen::_parse_node()$/;"	kind:f	class:AstGen	typeref:typename:bool	signature:()
_parse_node	ast_gen_class.hpp	/^	bool _parse_node();$/;"	kind:p	class:AstGen	typeref:typename:bool	access:private	signature:()
_parse_var	ast_gen_class.cpp	/^bool AstGen::_parse_var()$/;"	kind:f	class:AstGen	typeref:typename:bool	signature:()
_parse_var	ast_gen_class.hpp	/^	bool _parse_var();$/;"	kind:p	class:AstGen	typeref:typename:bool	access:private	signature:()
_pos_in_line	liborangepower_src/lexer_base_class.hpp	/^		size_t _x = 0, _line_num = 1, _pos_in_line = 0;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:size_t	access:private
_prev	liborangepower_src/linked_list_classes.hpp	/^		Node * _next = nullptr, * _prev = nullptr;$/;"	kind:m	class:liborangepower::containers::CircLinkedList::Node	typeref:typename:Node **	access:private
_prev	liborangepower_src/prev_curr_pair_classes.hpp	/^	Type _prev, _curr;$/;"	kind:m	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:Type	access:protected
_prev	liborangepower_src/prev_curr_pair_classes.hpp	/^	Type _prev, _curr;$/;"	kind:m	class:liborangepower::containers::PrevCurrPair	typeref:typename:Type	access:protected
_s	liborangepower_src/lexer_base_class.hpp	/^		std::string _s;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:std::string	access:private
_set_kw_tok	liborangepower_src/lexer_base_class.hpp	/^	inline bool _set_kw_tok$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:bool	access:protected	signature:(const std::map<TokType,std::string> & some_tok_ident_map)
_set_tok	liborangepower_src/lexer_base_class.hpp	/^	void _set_tok(TokType n_tok, bool perf_next_char)$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:void	access:protected	signature:(TokType n_tok,bool perf_next_char)
_size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t _size = 0;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:protected
_size	liborangepower_src/array_2d_helper_classes.hpp	/^	static constexpr size_t _size = _size_2d.x * _size_2d.y;$/;"	kind:m	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:protected
_size	liborangepower_src/array_helper_classes.hpp	/^	size_t _size = 0;$/;"	kind:m	class:liborangepower::containers::ArrayHelper	typeref:typename:size_t	access:protected
_size	liborangepower_src/array_helper_classes.hpp	/^	static constexpr size_t _size = _size;$/;"	kind:m	class:liborangepower::containers::ArrayCszHelper	typeref:typename:size_t	access:protected
_size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	Vec2<size_t> _size_2d;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:Vec2<size_t>	access:protected
_src_line_num	src_code_chunk_class.hpp	/^	size_t _src_line_num = 0, _src_pos_in_line = 0;$/;"	kind:m	class:frost_hdl::SrcCodeChunk	typeref:typename:size_t	access:private
_src_pos_in_line	src_code_chunk_class.hpp	/^	size_t _src_line_num = 0, _src_pos_in_line = 0;$/;"	kind:m	class:frost_hdl::SrcCodeChunk	typeref:typename:size_t	access:private
_state	liborangepower_src/lexer_base_class.hpp	/^	State _state;$/;"	kind:m	class:liborangepower::lang::LexerBase	typeref:typename:State	access:protected
_text	liborangepower_src/lexer_base_class.hpp	/^	std::string* _text = nullptr;$/;"	kind:m	class:liborangepower::lang::LexerBase	typeref:typename:std::string *	access:protected
_text	src_code_chunk_class.hpp	/^	string _text;$/;"	kind:m	class:frost_hdl::SrcCodeChunk	typeref:typename:string	access:private
_text_vec	liborangepower_src/parser_base_class.hpp	/^	std::vector<std::string*> _text_vec;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:std::vector<std::string * >	access:protected
_to_next_in_list	ast_gen_class.hpp	/^	inline bool _to_next_in_list(Tok end, Tok separator=Tok::Comma)$/;"	kind:f	class:AstGen	typeref:typename:bool	access:private	signature:(Tok end,Tok separator=Tok::Comma)
_to_next_in_list	liborangepower_src/parser_base_class.hpp	/^	bool _to_next_in_list(TokType end, TokType separator,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:protected	signature:(TokType end,TokType separator,const TokToStringMap & some_tok_ident_map,LexerType * lexer=nullptr)
_tok	liborangepower_src/lexer_base_class.hpp	/^		TokType _tok;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:TokType	access:private
_unexpected	ast_gen_class.hpp	/^	inline void _unexpected(Lexer* lexer)$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:(Lexer * lexer)
_unexpected	ast_gen_class.hpp	/^	inline void _unexpected(const LexerState& lex_state)$/;"	kind:f	class:AstGen	typeref:typename:void	access:private	signature:(const LexerState & lex_state)
_unexpected	liborangepower_src/parser_base_class.hpp	/^	void _unexpected(const TokToStringMap& some_tok_ident_map,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const TokToStringMap & some_tok_ident_map,LexerType * lexer=nullptr)
_unexpected	liborangepower_src/parser_base_class.hpp	/^	void _unexpected(const TokToStringMap& some_tok_ident_map,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const TokToStringMap & some_tok_ident_map,const LexerState & lex_state)
_warn	liborangepower_src/parser_base_class.hpp	/^	inline void _warn(ArgTypes&&... args) const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(ArgTypes &&...args) const
_warn	liborangepower_src/parser_base_class.hpp	/^	inline void _warn(const LexerState* lex_state, ArgTypes&&... args)$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const LexerState * lex_state,ArgTypes &&...args)
_world_rank	liborangepower_src/mpi_handler_class.hpp	/^	int _world_rank, _world_size;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected
_world_size	liborangepower_src/mpi_handler_class.hpp	/^	int _world_rank, _world_size;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected
_x	liborangepower_src/lexer_base_class.hpp	/^		size_t _x = 0, _line_num = 1, _pos_in_line = 0;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:size_t	access:private
anything_matches	liborangepower_src/misc_utility_funcs.hpp	/^bool anything_matches(const FirstArgType& first_val)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(const FirstArgType & first_val)
anything_matches	liborangepower_src/misc_utility_funcs.hpp	/^bool anything_matches(const FirstArgType& first_val,$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(const FirstArgType & first_val,const SecondArgType & next,RemArgTypes &&...rem_args)
argc	liborangepower_src/mpi_handler_class.hpp	/^	inline int argc() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:() const
argv	liborangepower_src/mpi_handler_class.hpp	/^	inline char** argv() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:char **	access:public	signature:() const
arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* arr() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type *	access:public	signature:() const
arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type *	access:public	signature:() const
arr	liborangepower_src/array_helper_classes.hpp	/^	const Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:const Type *	access:public	signature:() const
arr	liborangepower_src/array_helper_classes.hpp	/^	const Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:const Type *	access:public	signature:() const
arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(Type* dst, const void* src, size_t num_elems)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(Type * dst,const void * src,size_t num_elems)
arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(std::array<Type, size>& dst, const void* src)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<Type,size> & dst,const void * src)
arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(std::array<dst_type, size>& dst, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<dst_type,size> & dst,std::array<src_type,size> & src)
arr_memset	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memset(Type* dst, int c, size_t num_elems)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(Type * dst,int c,size_t num_elems)
arr_memset	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memset(std::array<Type, size>& dst, size_t src)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<Type,size> & dst,size_t src)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2<size_t>& offset_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2<size_t> & offset_2d)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2<size_t>& offset_2d)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2<size_t> & offset_2d)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2S32& offset_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2S32 & offset_2d)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2S32& offset_2d)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2S32 & offset_2d)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(size_t x, size_t y)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(size_t x,size_t y)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(size_t x, size_t y)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(size_t x,size_t y)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2<size_t>& offset_2d) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2<size_t> & offset_2d) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2<size_t>& offset_2d) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2<size_t> & offset_2d) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2S32& offset_2d) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2S32 & offset_2d) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2S32& offset_2d) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2S32 & offset_2d) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(size_t x, size_t y) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(size_t x,size_t y) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(size_t x, size_t y) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(size_t x,size_t y) const
at	liborangepower_src/array_helper_classes.hpp	/^	Type& at(size_t offset)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:Type &	access:public	signature:(size_t offset)
at	liborangepower_src/array_helper_classes.hpp	/^	Type& at(size_t offset)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:Type &	access:public	signature:(size_t offset)
at	liborangepower_src/array_helper_classes.hpp	/^	const Type& at(size_t offset) const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:const Type &	access:public	signature:(size_t offset) const
at	liborangepower_src/array_helper_classes.hpp	/^	const Type& at(size_t offset) const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:const Type &	access:public	signature:(size_t offset) const
awith	liborangepower_src/with_defines.hpp	/^#define awith(/;"	kind:d	signature:(obj)
back	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator back()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:()
back_up	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up()$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:void	access:public	signature:()
back_up	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up()$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:()
back_up_and_update	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up_and_update(Type&& n_curr)$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:void	access:public	signature:(Type && n_curr)
back_up_and_update	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up_and_update(Type&& n_curr)$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:(Type && n_curr)
back_up_and_update	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up_and_update(const Type& n_curr)$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:(const Type & n_curr)
begin	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator begin()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:()
bignum	liborangepower_src/gmp_stuff.hpp	/^namespace bignum$/;"	kind:n	namespace:liborangepower
bignum	liborangepower_src/gmp_stuff/gmp_stuff.cpp	/^namespace bignum$/;"	kind:n	namespace:liborangepower	file:
bitwise	liborangepower_src/misc_bitwise_funcs.hpp	/^namespace bitwise$/;"	kind:n	namespace:liborangepower
bprange_is_all	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr bool bprange_is_all(const Type& to_check, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:bool	signature:(const Type & to_check,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
bprange_is_all	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr bool bprange_is_all(size_t bit_pos_range_hi,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:bool	signature:(size_t bit_pos_range_hi,size_t bit_pos_range_lo)
c	liborangepower_src/lexer_base_class.hpp	/^	inline auto c() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
cbegin	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator cbegin() const$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:() const
cend	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator cend() const$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:() const
children	ast_gen_class.hpp	/^		std::vector<string> children;$/;"	kind:m	class:AstGen::Node	typeref:typename:std::vector<string>	access:public
children_ident_set	ast_gen_class.hpp	/^		std::set<string> children_ident_set, var_ident_set;$/;"	kind:m	class:AstGen::Node	typeref:typename:std::set<string>	access:public
clamp_to_range	liborangepower_src/range_funcs.hpp	/^inline Type clamp_to_range(Type range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:Type	signature:(Type range_start_inclusive,Type range_end_exclusive,Type to_clamp)
clear_and_set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits(Type& to_change, size_t clear_mask,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t clear_mask,size_t set_mask)
clear_and_set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits(Type& to_change, size_t val,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t val,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
clear_and_set_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits_with_range(Type& to_change, size_t val,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t val,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
clear_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_bits(Type& to_clear, size_t mask)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_clear,size_t mask)
clear_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_bits_with_range(Type& to_clear, size_t bit_pos_range_hi,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_clear,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
cmp_lex_tok	liborangepower_src/parser_base_class.hpp	/^	inline bool cmp_lex_tok(TokType to_cmp) const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:public	signature:(TokType to_cmp) const
cmpeq_array	liborangepower_src/misc_utility_funcs.hpp	/^bool cmpeq_array(FirstArgType* first_arr, SecondArgType* second_arr,$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(FirstArgType * first_arr,SecondArgType * second_arr,size_t size)
containers	liborangepower_src/array_2d_helper_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
containers	liborangepower_src/array_helper_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
containers	liborangepower_src/linked_list_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
containers	liborangepower_src/prev_curr_pair_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
containers	liborangepower_src/vec2_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
contains	liborangepower_src/linked_list_classes.hpp	/^	bool contains(Node* where) const$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:bool	access:public	signature:(Node * where) const
convert_bignum_to_str	liborangepower_src/gmp_stuff.hpp	/^inline std::string convert_bignum_to_str(const BigNum& in_bignum)$/;"	kind:f	namespace:liborangepower::bignum	typeref:typename:std::string	signature:(const BigNum & in_bignum)
convert_str_to	liborangepower_src/string_conversion_stuff.hpp	/^inline Type convert_str_to(const std::string& to_convert)$/;"	kind:f	namespace:liborangepower::strings	typeref:typename:Type	signature:(const std::string & to_convert)
convert_to_errwarn_string	src_code_chunk_class.cpp	/^string SrcCodeChunk::convert_to_errwarn_string() const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:string	signature:() const
convert_to_errwarn_string	src_code_chunk_class.hpp	/^	string convert_to_errwarn_string() const;$/;"	kind:p	class:frost_hdl::SrcCodeChunk	typeref:typename:string	access:public	signature:() const
convert_to_pos_string	src_code_chunk_class.cpp	/^string SrcCodeChunk::convert_to_pos_string() const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:string	signature:() const
convert_to_pos_string	src_code_chunk_class.hpp	/^	string convert_to_pos_string() const;$/;"	kind:p	class:frost_hdl::SrcCodeChunk	typeref:typename:string	access:public	signature:() const
count_leading_zeros	liborangepower_src/misc_bitwise_funcs.hpp	/^size_t count_leading_zeros(Type x)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:size_t	signature:(Type x)
custom_abs	liborangepower_src/misc_utility_funcs.hpp	/^inline Type custom_abs(const Type& val)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:Type	signature:(const Type & val)
data	liborangepower_src/linked_list_classes.hpp	/^		Type data;$/;"	kind:m	class:liborangepower::containers::CircLinkedList::Node	typeref:typename:Type	access:public
debug_print_json	liborangepower_src/json_stuff.hpp	/^inline void debug_print_json(Json::Value* iter, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::Value * iter,std::ostream & os=std::cout,size_t tabs_level=0)
debug_print_json	liborangepower_src/json_stuff.hpp	/^void debug_print_json(const Json::Value& some_value, $/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os=std::cout,size_t tabs_level=0)
debug_print_json	liborangepower_src/json_stuff/json_stuff.cpp	/^void debug_print_json(const Json::Value& some_value, std::ostream& os, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os,size_t tabs_level)
dup_set	liborangepower_src/parser_base_class.hpp	/^		std::set<LexerState> found_set, dup_set;$/;"	kind:m	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:std::set<LexerState>	access:public
empty	liborangepower_src/linked_list_classes.hpp	/^	inline bool empty() const$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:bool	access:public	signature:() const
end	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator end()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:()
end	liborangepower_src/parser_base_class.hpp	/^		TokType end;$/;"	kind:m	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:TokType	access:public
end_tp	liborangepower_src/time_stuff.hpp	/^	std::chrono::high_resolution_clock::time_point start_tp, end_tp;$/;"	kind:m	class:liborangepower::time::Profiler	typeref:typename:std::chrono::high_resolution_clock::time_point	access:protected
err	src_code_chunk_class.hpp	/^	inline void err(const string& msg, int status=1) const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:void	access:public	signature:(const string & msg,int status=1) const
extends	ast_gen_class.hpp	/^		string ident, extends;$/;"	kind:m	class:AstGen::Node	typeref:typename:string	access:public
first_dup	liborangepower_src/parser_base_class.hpp	/^		LexerState first_dup;$/;"	kind:m	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:LexerState	access:public
found_set	liborangepower_src/parser_base_class.hpp	/^		std::set<LexerState> found_set, dup_set;$/;"	kind:m	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:std::set<LexerState>	access:public
fprintout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& fprintout(std::ostream& out_file, ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & out_file,ArgTypes &&...args)
front	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator front()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:()
frost_hdl	src_code_chunk_class.cpp	/^namespace frost_hdl$/;"	kind:n	file:
frost_hdl	src_code_chunk_class.hpp	/^namespace frost_hdl$/;"	kind:n
frost_hdl::SrcCodeChunk	src_code_chunk_class.hpp	/^class SrcCodeChunk$/;"	kind:c	namespace:frost_hdl
frost_hdl::SrcCodeChunk::GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	src_code_chunk_class.hpp	/^	GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(SrcCodeChunk);$/;"	kind:p	class:frost_hdl::SrcCodeChunk	access:public	signature:(SrcCodeChunk)
frost_hdl::SrcCodeChunk::SrcCodeChunk	src_code_chunk_class.cpp	/^SrcCodeChunk::SrcCodeChunk()$/;"	kind:f	class:frost_hdl::SrcCodeChunk	signature:()
frost_hdl::SrcCodeChunk::SrcCodeChunk	src_code_chunk_class.cpp	/^SrcCodeChunk::SrcCodeChunk(const string& s_filename,$/;"	kind:f	class:frost_hdl::SrcCodeChunk	signature:(const string & s_filename,const string & s_text,size_t s_src_line_num,size_t s_src_pos_in_line)
frost_hdl::SrcCodeChunk::SrcCodeChunk	src_code_chunk_class.hpp	/^	SrcCodeChunk();$/;"	kind:p	class:frost_hdl::SrcCodeChunk	access:public	signature:()
frost_hdl::SrcCodeChunk::SrcCodeChunk	src_code_chunk_class.hpp	/^	explicit SrcCodeChunk(const string& s_filename,$/;"	kind:p	class:frost_hdl::SrcCodeChunk	access:public	signature:(const string & s_filename,const string & s_text,size_t s_src_line_num,size_t s_src_pos_in_line)
frost_hdl::SrcCodeChunk::_filename	src_code_chunk_class.hpp	/^	string _filename;$/;"	kind:m	class:frost_hdl::SrcCodeChunk	typeref:typename:string	access:private
frost_hdl::SrcCodeChunk::_src_line_num	src_code_chunk_class.hpp	/^	size_t _src_line_num = 0, _src_pos_in_line = 0;$/;"	kind:m	class:frost_hdl::SrcCodeChunk	typeref:typename:size_t	access:private
frost_hdl::SrcCodeChunk::_src_pos_in_line	src_code_chunk_class.hpp	/^	size_t _src_line_num = 0, _src_pos_in_line = 0;$/;"	kind:m	class:frost_hdl::SrcCodeChunk	typeref:typename:size_t	access:private
frost_hdl::SrcCodeChunk::_text	src_code_chunk_class.hpp	/^	string _text;$/;"	kind:m	class:frost_hdl::SrcCodeChunk	typeref:typename:string	access:private
frost_hdl::SrcCodeChunk::convert_to_errwarn_string	src_code_chunk_class.cpp	/^string SrcCodeChunk::convert_to_errwarn_string() const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:string	signature:() const
frost_hdl::SrcCodeChunk::convert_to_errwarn_string	src_code_chunk_class.hpp	/^	string convert_to_errwarn_string() const;$/;"	kind:p	class:frost_hdl::SrcCodeChunk	typeref:typename:string	access:public	signature:() const
frost_hdl::SrcCodeChunk::convert_to_pos_string	src_code_chunk_class.cpp	/^string SrcCodeChunk::convert_to_pos_string() const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:string	signature:() const
frost_hdl::SrcCodeChunk::convert_to_pos_string	src_code_chunk_class.hpp	/^	string convert_to_pos_string() const;$/;"	kind:p	class:frost_hdl::SrcCodeChunk	typeref:typename:string	access:public	signature:() const
frost_hdl::SrcCodeChunk::err	src_code_chunk_class.hpp	/^	inline void err(const string& msg, int status=1) const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:void	access:public	signature:(const string & msg,int status=1) const
frost_hdl::SrcCodeChunk::syntax_error	src_code_chunk_class.hpp	/^	inline void syntax_error(const string& msg, int status=1) const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:void	access:public	signature:(const string & msg,int status=1) const
frost_hdl::SrcCodeChunk::warn	src_code_chunk_class.hpp	/^	inline void warn(const string& msg) const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:void	access:public	signature:(const string & msg) const
frost_hdl::SrcCodeChunk::~SrcCodeChunk	src_code_chunk_class.cpp	/^SrcCodeChunk::~SrcCodeChunk()$/;"	kind:f	class:frost_hdl::SrcCodeChunk	signature:()
frost_hdl::SrcCodeChunk::~SrcCodeChunk	src_code_chunk_class.hpp	/^	virtual ~SrcCodeChunk();$/;"	kind:p	class:frost_hdl::SrcCodeChunk	access:public	signature:()
func	liborangepower_src/misc_output_classes.hpp	/^	static void func(std::ostream& os, FirstArgType&& first_val, $/;"	kind:f	class:liborangepower::printout_etc::AnyPrintoutBackend	typeref:typename:void	access:private	signature:(std::ostream & os,FirstArgType && first_val,RemArgTypes &&...rem_args)
get_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr Type get_bits(Type to_get_from, size_t mask, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:Type	signature:(Type to_get_from,size_t mask,size_t shift=0)
get_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr Type get_bits_with_range(Type to_get_from, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:Type	signature:(Type to_get_from,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
get_hrc_now	liborangepower_src/time_stuff.hpp	/^	static inline auto get_hrc_now()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
get_hrc_now_time_t	liborangepower_src/time_stuff.hpp	/^	static inline auto get_hrc_now_time_t()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
get_istream_as_str	liborangepower_src/misc_input_classes.hpp	/^inline std::string get_istream_as_str(std::istream& to_get_from)$/;"	kind:f	namespace:liborangepower::misc_input	typeref:typename:std::string	signature:(std::istream & to_get_from)
get_json_value_type_as_str	liborangepower_src/json_stuff.hpp	/^inline std::string get_json_value_type_as_str(Json::Value* iter)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:std::string	signature:(Json::Value * iter)
get_json_value_type_as_str	liborangepower_src/json_stuff.hpp	/^std::string get_json_value_type_as_str(const Json::Value& some_value);$/;"	kind:p	namespace:liborangepower::json	typeref:typename:std::string	signature:(const Json::Value & some_value)
get_json_value_type_as_str	liborangepower_src/json_stuff/json_stuff.cpp	/^std::string get_json_value_type_as_str(const Json::Value& some_value)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:std::string	signature:(const Json::Value & some_value)
get_stdin_as_str	liborangepower_src/misc_input_classes.hpp	/^inline std::string get_stdin_as_str()$/;"	kind:f	namespace:liborangepower::misc_input	typeref:typename:std::string	signature:()
has_changed	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline bool has_changed() const$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:bool	access:public	signature:() const
has_changed	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline bool has_changed() const$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:bool	access:public	signature:() const
head	liborangepower_src/linked_list_classes.hpp	/^	inline Node* head()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:Node *	access:public	signature:()
height	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t height() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
height	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t height() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
ident	ast_gen_class.hpp	/^		string ident, extends;$/;"	kind:m	class:AstGen::Node	typeref:typename:string	access:public
ident	ast_gen_class.hpp	/^		string type, ident;$/;"	kind:m	class:AstGen::Var	typeref:typename:string	access:public
in_range	liborangepower_src/range_funcs.hpp	/^inline bool in_range(FirstArgType range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(FirstArgType range_start_inclusive,SecondArgType range_end_exclusive,ThirdArgType to_check)
in_range_inclusive	liborangepower_src/range_funcs.hpp	/^inline bool in_range_inclusive(FirstArgType range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(FirstArgType range_start_inclusive,SecondArgType range_end_inclusive,ThirdArgType to_check)
init	liborangepower_src/array_2d_helper_classes.hpp	/^	void init(Type* s_arr)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:void	access:public	signature:(Type * s_arr)
init	liborangepower_src/array_2d_helper_classes.hpp	/^	void init(Type* s_arr, const Vec2<size_t>& s_size_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:void	access:public	signature:(Type * s_arr,const Vec2<size_t> & s_size_2d)
init	liborangepower_src/array_helper_classes.hpp	/^	void init(Type* s_the_array)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:void	access:public	signature:(Type * s_the_array)
init	liborangepower_src/array_helper_classes.hpp	/^	void init(Type* s_the_array, size_t s_size)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:void	access:public	signature:(Type * s_the_array,size_t s_size)
init_array	liborangepower_src/misc_utility_funcs.hpp	/^inline void init_array(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const AllTheTypes &...all_the_values)
insert_after	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator insert_after(Node* where, Type&& to_insert)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Node * where,Type && to_insert)
insert_after	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator insert_after(Node* where, const Type& to_insert)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Node * where,const Type & to_insert)
insert_before	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator insert_before(Node* where, Type&& to_insert)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Node * where,Type && to_insert)
insert_before	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator insert_before(Node* where, const Type& to_insert)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Node * where,const Type & to_insert)
integer_types	liborangepower_src/misc_types.hpp	/^namespace integer_types$/;"	kind:n	namespace:liborangepower
json	liborangepower_src/json_stuff.hpp	/^namespace json$/;"	kind:n	namespace:liborangepower
json	liborangepower_src/json_stuff/json_stuff.cpp	/^namespace json$/;"	kind:n	namespace:liborangepower	file:
json_err	liborangepower_src/json_stuff/json_stuff.cpp	/^static void json_err(arg_types&&... args)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	file:	signature:(arg_types &&...args)
lang	liborangepower_src/lexer_base_class.hpp	/^namespace lang$/;"	kind:n	namespace:liborangepower
lang	liborangepower_src/parser_base_class.hpp	/^namespace lang$/;"	kind:n	namespace:liborangepower
liborangepower	liborangepower_src/array_2d_helper_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/array_helper_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/gmp_stuff.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/gmp_stuff/gmp_stuff.cpp	/^namespace liborangepower$/;"	kind:n	file:
liborangepower	liborangepower_src/json_stuff.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/json_stuff/json_stuff.cpp	/^namespace liborangepower$/;"	kind:n	file:
liborangepower	liborangepower_src/lexer_base_class.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/linked_list_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/memwhatever_wrappers.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/misc_bitwise_funcs.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/misc_input_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/misc_output_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/misc_types.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/misc_utility_funcs.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/mpi_handler_class.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/parser_base_class.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/prev_curr_pair_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/quoted_str_converter_stuff.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/range_funcs.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/string_conversion_stuff.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/time_stuff.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/vec2_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower::bignum	liborangepower_src/gmp_stuff.hpp	/^namespace bignum$/;"	kind:n	namespace:liborangepower
liborangepower::bignum	liborangepower_src/gmp_stuff/gmp_stuff.cpp	/^namespace bignum$/;"	kind:n	namespace:liborangepower	file:
liborangepower::bignum::BigNum	liborangepower_src/gmp_stuff.hpp	/^typedef mpz_class BigNum;$/;"	kind:t	namespace:liborangepower::bignum	typeref:typename:mpz_class
liborangepower::bignum::convert_bignum_to_str	liborangepower_src/gmp_stuff.hpp	/^inline std::string convert_bignum_to_str(const BigNum& in_bignum)$/;"	kind:f	namespace:liborangepower::bignum	typeref:typename:std::string	signature:(const BigNum & in_bignum)
liborangepower::bignum::str_is_base_10_sint_bignum	liborangepower_src/gmp_stuff.hpp	/^bool str_is_base_10_sint_bignum(const std::string& str, BigNum& ret);$/;"	kind:p	namespace:liborangepower::bignum	typeref:typename:bool	signature:(const std::string & str,BigNum & ret)
liborangepower::bignum::str_is_base_10_sint_bignum	liborangepower_src/gmp_stuff/gmp_stuff.cpp	/^bool str_is_base_10_sint_bignum(const std::string& str, BigNum& ret)$/;"	kind:f	namespace:liborangepower::bignum	typeref:typename:bool	signature:(const std::string & str,BigNum & ret)
liborangepower::bitwise	liborangepower_src/misc_bitwise_funcs.hpp	/^namespace bitwise$/;"	kind:n	namespace:liborangepower
liborangepower::bitwise::bprange_is_all	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr bool bprange_is_all(const Type& to_check, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:bool	signature:(const Type & to_check,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
liborangepower::bitwise::bprange_is_all	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr bool bprange_is_all(size_t bit_pos_range_hi,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:bool	signature:(size_t bit_pos_range_hi,size_t bit_pos_range_lo)
liborangepower::bitwise::clear_and_set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits(Type& to_change, size_t clear_mask,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t clear_mask,size_t set_mask)
liborangepower::bitwise::clear_and_set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits(Type& to_change, size_t val,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t val,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
liborangepower::bitwise::clear_and_set_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits_with_range(Type& to_change, size_t val,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t val,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
liborangepower::bitwise::clear_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_bits(Type& to_clear, size_t mask)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_clear,size_t mask)
liborangepower::bitwise::clear_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_bits_with_range(Type& to_clear, size_t bit_pos_range_hi,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_clear,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
liborangepower::bitwise::count_leading_zeros	liborangepower_src/misc_bitwise_funcs.hpp	/^size_t count_leading_zeros(Type x)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:size_t	signature:(Type x)
liborangepower::bitwise::get_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr Type get_bits(Type to_get_from, size_t mask, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:Type	signature:(Type to_get_from,size_t mask,size_t shift=0)
liborangepower::bitwise::get_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr Type get_bits_with_range(Type to_get_from, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:Type	signature:(Type to_get_from,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
liborangepower::bitwise::set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void set_bits(Type& to_set, size_t mask)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_set,size_t mask)
liborangepower::bitwise::set_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void set_bits_with_range(Type& to_set, size_t val,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_set,size_t val,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
liborangepower::bitwise::width_of_type	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr size_t width_of_type()$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:size_t	signature:()
liborangepower::bitwise::width_of_type	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr size_t width_of_type(const Type& to_check)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:size_t	signature:(const Type & to_check)
liborangepower::containers	liborangepower_src/array_2d_helper_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
liborangepower::containers	liborangepower_src/array_helper_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
liborangepower::containers	liborangepower_src/linked_list_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
liborangepower::containers	liborangepower_src/prev_curr_pair_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
liborangepower::containers	liborangepower_src/vec2_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
liborangepower::containers::Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^class Array2dHelper$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::Array2dHelper::Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper()$/;"	kind:f	class:liborangepower::containers::Array2dHelper	access:public	signature:()
liborangepower::containers::Array2dHelper::Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper(Type* s_arr, $/;"	kind:f	class:liborangepower::containers::Array2dHelper	access:public	signature:(Type * s_arr,const Vec2<size_t> & s_size_2d)
liborangepower::containers::Array2dHelper::Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper(const Array2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::Array2dHelper	access:public	signature:(const Array2dHelper & to_copy)
liborangepower::containers::Array2dHelper::_arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* _arr = nullptr;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:Type *	access:protected
liborangepower::containers::Array2dHelper::_size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t _size = 0;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:protected
liborangepower::containers::Array2dHelper::_size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	Vec2<size_t> _size_2d;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:Vec2<size_t>	access:protected
liborangepower::containers::Array2dHelper::arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* arr() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type *	access:public	signature:() const
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2<size_t>& offset_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2<size_t> & offset_2d)
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2S32& offset_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2S32 & offset_2d)
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(size_t x, size_t y)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(size_t x,size_t y)
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2<size_t>& offset_2d) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2<size_t> & offset_2d) const
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2S32& offset_2d) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2S32 & offset_2d) const
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(size_t x, size_t y) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(size_t x,size_t y) const
liborangepower::containers::Array2dHelper::height	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t height() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::Array2dHelper::init	liborangepower_src/array_2d_helper_classes.hpp	/^	void init(Type* s_arr, const Vec2<size_t>& s_size_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:void	access:public	signature:(Type * s_arr,const Vec2<size_t> & s_size_2d)
liborangepower::containers::Array2dHelper::operator =	liborangepower_src/array_2d_helper_classes.hpp	/^	Array2dHelper& operator = (const Array2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::Array2dHelper	typeref:typename:Array2dHelper &	access:public	signature:(const Array2dHelper & to_copy)
liborangepower::containers::Array2dHelper::size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::Array2dHelper::size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	const Vec2<size_t>& size_2d() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Vec2<size_t> &	access:public	signature:() const
liborangepower::containers::Array2dHelper::width	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t width() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^class ArrayCsz2dHelper$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::ArrayCsz2dHelper::ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper()$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:()
liborangepower::containers::ArrayCsz2dHelper::ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper(Type* s_arr)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:(Type * s_arr)
liborangepower::containers::ArrayCsz2dHelper::ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper(const ArrayCsz2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:(const ArrayCsz2dHelper & to_copy)
liborangepower::containers::ArrayCsz2dHelper::_arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* _arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type *	access:protected
liborangepower::containers::ArrayCsz2dHelper::_size	liborangepower_src/array_2d_helper_classes.hpp	/^	static constexpr size_t _size = _size_2d.x * _size_2d.y;$/;"	kind:m	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:protected
liborangepower::containers::ArrayCsz2dHelper::arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type *	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2<size_t>& offset_2d)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2<size_t> & offset_2d)
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2S32& offset_2d)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2S32 & offset_2d)
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(size_t x, size_t y)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(size_t x,size_t y)
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2<size_t>& offset_2d) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2<size_t> & offset_2d) const
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2S32& offset_2d) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2S32 & offset_2d) const
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(size_t x, size_t y) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(size_t x,size_t y) const
liborangepower::containers::ArrayCsz2dHelper::height	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t height() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper::init	liborangepower_src/array_2d_helper_classes.hpp	/^	void init(Type* s_arr)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:void	access:public	signature:(Type * s_arr)
liborangepower::containers::ArrayCsz2dHelper::operator =	liborangepower_src/array_2d_helper_classes.hpp	/^	ArrayCsz2dHelper& operator = (const ArrayCsz2dHelper& to_copy) $/;"	kind:p	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:ArrayCsz2dHelper &	access:public	signature:(const ArrayCsz2dHelper & to_copy)
liborangepower::containers::ArrayCsz2dHelper::size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper::size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	const Vec2<size_t>& size_2d() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Vec2<size_t> &	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper::width	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t width() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^class ArrayCszHelper$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::ArrayCszHelper::ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper()$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	access:public	signature:()
liborangepower::containers::ArrayCszHelper::ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper(Type* s_the_array) : _arr(s_the_array)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	access:public	signature:(Type * s_the_array)
liborangepower::containers::ArrayCszHelper::ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper(const ArrayCszHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCszHelper	access:public	signature:(const ArrayCszHelper & to_copy)
liborangepower::containers::ArrayCszHelper::_arr	liborangepower_src/array_helper_classes.hpp	/^	Type* _arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayCszHelper	typeref:typename:Type *	access:public
liborangepower::containers::ArrayCszHelper::_size	liborangepower_src/array_helper_classes.hpp	/^	static constexpr size_t _size = _size;$/;"	kind:m	class:liborangepower::containers::ArrayCszHelper	typeref:typename:size_t	access:protected
liborangepower::containers::ArrayCszHelper::arr	liborangepower_src/array_helper_classes.hpp	/^	const Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:const Type *	access:public	signature:() const
liborangepower::containers::ArrayCszHelper::at	liborangepower_src/array_helper_classes.hpp	/^	Type& at(size_t offset)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:Type &	access:public	signature:(size_t offset)
liborangepower::containers::ArrayCszHelper::at	liborangepower_src/array_helper_classes.hpp	/^	const Type& at(size_t offset) const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:const Type &	access:public	signature:(size_t offset) const
liborangepower::containers::ArrayCszHelper::init	liborangepower_src/array_helper_classes.hpp	/^	void init(Type* s_the_array)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:void	access:public	signature:(Type * s_the_array)
liborangepower::containers::ArrayCszHelper::operator =	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper& operator = (const ArrayCszHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCszHelper	typeref:typename:ArrayCszHelper &	access:public	signature:(const ArrayCszHelper & to_copy)
liborangepower::containers::ArrayCszHelper::size	liborangepower_src/array_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^class ArrayHelper$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::ArrayHelper::ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper()$/;"	kind:f	class:liborangepower::containers::ArrayHelper	access:public	signature:()
liborangepower::containers::ArrayHelper::ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper(Type* s_the_array, size_t s_size)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	access:public	signature:(Type * s_the_array,size_t s_size)
liborangepower::containers::ArrayHelper::ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper(const ArrayHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayHelper	access:public	signature:(const ArrayHelper & to_copy)
liborangepower::containers::ArrayHelper::_arr	liborangepower_src/array_helper_classes.hpp	/^	Type* _arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayHelper	typeref:typename:Type *	access:protected
liborangepower::containers::ArrayHelper::_size	liborangepower_src/array_helper_classes.hpp	/^	size_t _size = 0;$/;"	kind:m	class:liborangepower::containers::ArrayHelper	typeref:typename:size_t	access:protected
liborangepower::containers::ArrayHelper::arr	liborangepower_src/array_helper_classes.hpp	/^	const Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:const Type *	access:public	signature:() const
liborangepower::containers::ArrayHelper::at	liborangepower_src/array_helper_classes.hpp	/^	Type& at(size_t offset)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:Type &	access:public	signature:(size_t offset)
liborangepower::containers::ArrayHelper::at	liborangepower_src/array_helper_classes.hpp	/^	const Type& at(size_t offset) const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:const Type &	access:public	signature:(size_t offset) const
liborangepower::containers::ArrayHelper::init	liborangepower_src/array_helper_classes.hpp	/^	void init(Type* s_the_array, size_t s_size)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:void	access:public	signature:(Type * s_the_array,size_t s_size)
liborangepower::containers::ArrayHelper::operator =	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper& operator = (const ArrayHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayHelper	typeref:typename:ArrayHelper &	access:public	signature:(const ArrayHelper & to_copy)
liborangepower::containers::ArrayHelper::size	liborangepower_src/array_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::CircLinkedList	liborangepower_src/linked_list_classes.hpp	/^class CircLinkedList$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::CircLinkedList::CircLinkedList	liborangepower_src/linked_list_classes.hpp	/^	inline CircLinkedList()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	access:public	signature:()
liborangepower::containers::CircLinkedList::Node	liborangepower_src/linked_list_classes.hpp	/^	class Node final$/;"	kind:c	class:liborangepower::containers::CircLinkedList	access:public
liborangepower::containers::CircLinkedList::Node::GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/linked_list_classes.hpp	/^		GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(Node);$/;"	kind:p	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:(Node)
liborangepower::containers::CircLinkedList::Node::Node	liborangepower_src/linked_list_classes.hpp	/^		Node() = default;$/;"	kind:p	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:()
liborangepower::containers::CircLinkedList::Node::Node	liborangepower_src/linked_list_classes.hpp	/^		inline Node(Type&& s_data)$/;"	kind:f	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:(Type && s_data)
liborangepower::containers::CircLinkedList::Node::Node	liborangepower_src/linked_list_classes.hpp	/^		inline Node(const Type& s_data)$/;"	kind:f	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:(const Type & s_data)
liborangepower::containers::CircLinkedList::Node::_next	liborangepower_src/linked_list_classes.hpp	/^		Node * _next = nullptr, * _prev = nullptr;$/;"	kind:m	class:liborangepower::containers::CircLinkedList::Node	typeref:typename:Node *	access:private
liborangepower::containers::CircLinkedList::Node::_prev	liborangepower_src/linked_list_classes.hpp	/^		Node * _next = nullptr, * _prev = nullptr;$/;"	kind:m	class:liborangepower::containers::CircLinkedList::Node	typeref:typename:Node **	access:private
liborangepower::containers::CircLinkedList::Node::data	liborangepower_src/linked_list_classes.hpp	/^		Type data;$/;"	kind:m	class:liborangepower::containers::CircLinkedList::Node	typeref:typename:Type	access:public
liborangepower::containers::CircLinkedList::Node::~Node	liborangepower_src/linked_list_classes.hpp	/^		~Node() = default;$/;"	kind:p	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:()
liborangepower::containers::CircLinkedList::NodeIterator	liborangepower_src/linked_list_classes.hpp	/^	class NodeIterator final$/;"	kind:c	class:liborangepower::containers::CircLinkedList	access:public
liborangepower::containers::CircLinkedList::NodeIterator::GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/linked_list_classes.hpp	/^		GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(NodeIterator);$/;"	kind:p	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:(NodeIterator)
liborangepower::containers::CircLinkedList::NodeIterator::NodeIterator	liborangepower_src/linked_list_classes.hpp	/^		NodeIterator() = default;$/;"	kind:p	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:()
liborangepower::containers::CircLinkedList::NodeIterator::NodeIterator	liborangepower_src/linked_list_classes.hpp	/^		inline NodeIterator(Node* s_node)$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:(Node * s_node)
liborangepower::containers::CircLinkedList::NodeIterator::_node	liborangepower_src/linked_list_classes.hpp	/^		Node* _node = nullptr;$/;"	kind:m	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:Node *	access:private
liborangepower::containers::CircLinkedList::NodeIterator::operator !=	liborangepower_src/linked_list_classes.hpp	/^		inline bool operator != (const NodeIterator& other) const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:bool	access:public	signature:(const NodeIterator & other) const
liborangepower::containers::CircLinkedList::NodeIterator::operator *	liborangepower_src/linked_list_classes.hpp	/^		inline Node& operator * () const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:Node &	access:public	signature:() const
liborangepower::containers::CircLinkedList::NodeIterator::operator ++	liborangepower_src/linked_list_classes.hpp	/^		inline NodeIterator& operator ++ ()$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:NodeIterator &	access:public	signature:()
liborangepower::containers::CircLinkedList::NodeIterator::operator --	liborangepower_src/linked_list_classes.hpp	/^		inline NodeIterator& operator -- ()$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:NodeIterator &	access:public	signature:()
liborangepower::containers::CircLinkedList::NodeIterator::operator ->	liborangepower_src/linked_list_classes.hpp	/^		inline Node* operator -> () const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:Node *	access:public	signature:() const
liborangepower::containers::CircLinkedList::NodeIterator::operator ==	liborangepower_src/linked_list_classes.hpp	/^		inline bool operator == (const NodeIterator& other) const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:bool	access:public	signature:(const NodeIterator & other) const
liborangepower::containers::CircLinkedList::NodeIterator::operator Node*	liborangepower_src/linked_list_classes.hpp	/^		inline operator Node* () const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:() const
liborangepower::containers::CircLinkedList::NodeIterator::~NodeIterator	liborangepower_src/linked_list_classes.hpp	/^		~NodeIterator() = default;$/;"	kind:p	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:()
liborangepower::containers::CircLinkedList::_head	liborangepower_src/linked_list_classes.hpp	/^	Node _head;$/;"	kind:m	class:liborangepower::containers::CircLinkedList	typeref:typename:Node	access:private
liborangepower::containers::CircLinkedList::_inner_insert_after	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator _inner_insert_after(Node* where, Node* what)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:private	signature:(Node * where,Node * what)
liborangepower::containers::CircLinkedList::_inner_insert_before	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator _inner_insert_before(Node* where, Node* what)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:private	signature:(Node * where,Node * what)
liborangepower::containers::CircLinkedList::back	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator back()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:()
liborangepower::containers::CircLinkedList::begin	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator begin()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:()
liborangepower::containers::CircLinkedList::cbegin	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator cbegin() const$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:() const
liborangepower::containers::CircLinkedList::cend	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator cend() const$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:() const
liborangepower::containers::CircLinkedList::contains	liborangepower_src/linked_list_classes.hpp	/^	bool contains(Node* where) const$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:bool	access:public	signature:(Node * where) const
liborangepower::containers::CircLinkedList::empty	liborangepower_src/linked_list_classes.hpp	/^	inline bool empty() const$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:bool	access:public	signature:() const
liborangepower::containers::CircLinkedList::end	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator end()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:()
liborangepower::containers::CircLinkedList::front	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator front()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:()
liborangepower::containers::CircLinkedList::head	liborangepower_src/linked_list_classes.hpp	/^	inline Node* head()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:Node *	access:public	signature:()
liborangepower::containers::CircLinkedList::insert_after	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator insert_after(Node* where, Type&& to_insert)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Node * where,Type && to_insert)
liborangepower::containers::CircLinkedList::insert_after	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator insert_after(Node* where, const Type& to_insert)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Node * where,const Type & to_insert)
liborangepower::containers::CircLinkedList::insert_before	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator insert_before(Node* where, Type&& to_insert)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Node * where,Type && to_insert)
liborangepower::containers::CircLinkedList::insert_before	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator insert_before(Node* where, const Type& to_insert)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Node * where,const Type & to_insert)
liborangepower::containers::CircLinkedList::pop_back	liborangepower_src/linked_list_classes.hpp	/^	inline void pop_back()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:()
liborangepower::containers::CircLinkedList::pop_front	liborangepower_src/linked_list_classes.hpp	/^	inline void pop_front()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:()
liborangepower::containers::CircLinkedList::push_back	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator push_back(Type&& to_push)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Type && to_push)
liborangepower::containers::CircLinkedList::push_back	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator push_back(const Type& to_push)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(const Type & to_push)
liborangepower::containers::CircLinkedList::push_front	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator push_front(Type&& to_push)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Type && to_push)
liborangepower::containers::CircLinkedList::push_front	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator push_front(const Type& to_push)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(const Type & to_push)
liborangepower::containers::CircLinkedList::remove	liborangepower_src/linked_list_classes.hpp	/^	inline void remove(Node* where)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:(Node * where)
liborangepower::containers::CircLinkedList::remove_after	liborangepower_src/linked_list_classes.hpp	/^	inline void remove_after(Node* where)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:(Node * where)
liborangepower::containers::CircLinkedList::remove_before	liborangepower_src/linked_list_classes.hpp	/^	inline void remove_before(Node* where)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:(Node * where)
liborangepower::containers::CircLinkedList::~CircLinkedList	liborangepower_src/linked_list_classes.hpp	/^	virtual inline ~CircLinkedList()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:CircLinkedList	access:public	signature:()
liborangepower::containers::MoveOnlyPrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^class MoveOnlyPrevCurrPair$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::MoveOnlyPrevCurrPair::GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/prev_curr_pair_classes.hpp	/^	GEN_MOVE_ONLY_CONSTRUCTORS_AND_ASSIGN(MoveOnlyPrevCurrPair);$/;"	kind:p	class:liborangepower::containers::MoveOnlyPrevCurrPair	access:public	signature:(MoveOnlyPrevCurrPair)
liborangepower::containers::MoveOnlyPrevCurrPair::MoveOnlyPrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline MoveOnlyPrevCurrPair() = default;$/;"	kind:p	class:liborangepower::containers::MoveOnlyPrevCurrPair	access:public	signature:()
liborangepower::containers::MoveOnlyPrevCurrPair::_curr	liborangepower_src/prev_curr_pair_classes.hpp	/^	Type _prev, _curr;$/;"	kind:m	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:Type	access:protected
liborangepower::containers::MoveOnlyPrevCurrPair::_prev	liborangepower_src/prev_curr_pair_classes.hpp	/^	Type _prev, _curr;$/;"	kind:m	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:Type	access:protected
liborangepower::containers::MoveOnlyPrevCurrPair::back_up	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up()$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:void	access:public	signature:()
liborangepower::containers::MoveOnlyPrevCurrPair::back_up_and_update	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up_and_update(Type&& n_curr)$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:void	access:public	signature:(Type && n_curr)
liborangepower::containers::MoveOnlyPrevCurrPair::has_changed	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline bool has_changed() const$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:bool	access:public	signature:() const
liborangepower::containers::MoveOnlyPrevCurrPair::operator () 	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline Type& operator () ()$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:Type &	access:public	signature:()
liborangepower::containers::MoveOnlyPrevCurrPair::operator () 	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline const Type& operator () () const$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:const Type &	access:public	signature:() const
liborangepower::containers::MoveOnlyPrevCurrPair::~MoveOnlyPrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^	virtual ~MoveOnlyPrevCurrPair() = default;$/;"	kind:p	class:liborangepower::containers::MoveOnlyPrevCurrPair	access:public	signature:()
liborangepower::containers::PrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^class PrevCurrPair$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::PrevCurrPair::GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/prev_curr_pair_classes.hpp	/^	GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(PrevCurrPair);$/;"	kind:p	class:liborangepower::containers::PrevCurrPair	access:public	signature:(PrevCurrPair)
liborangepower::containers::PrevCurrPair::PrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline PrevCurrPair() = default;$/;"	kind:p	class:liborangepower::containers::PrevCurrPair	access:public	signature:()
liborangepower::containers::PrevCurrPair::_curr	liborangepower_src/prev_curr_pair_classes.hpp	/^	Type _prev, _curr;$/;"	kind:m	class:liborangepower::containers::PrevCurrPair	typeref:typename:Type	access:protected
liborangepower::containers::PrevCurrPair::_prev	liborangepower_src/prev_curr_pair_classes.hpp	/^	Type _prev, _curr;$/;"	kind:m	class:liborangepower::containers::PrevCurrPair	typeref:typename:Type	access:protected
liborangepower::containers::PrevCurrPair::back_up	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up()$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:()
liborangepower::containers::PrevCurrPair::back_up_and_update	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up_and_update(Type&& n_curr)$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:(Type && n_curr)
liborangepower::containers::PrevCurrPair::back_up_and_update	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline void back_up_and_update(const Type& n_curr)$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:(const Type & n_curr)
liborangepower::containers::PrevCurrPair::has_changed	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline bool has_changed() const$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:bool	access:public	signature:() const
liborangepower::containers::PrevCurrPair::operator () 	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline Type& operator () ()$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:Type &	access:public	signature:()
liborangepower::containers::PrevCurrPair::operator () 	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline const Type& operator () () const$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:const Type &	access:public	signature:() const
liborangepower::containers::PrevCurrPair::~PrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^	virtual ~PrevCurrPair() = default;$/;"	kind:p	class:liborangepower::containers::PrevCurrPair	access:public	signature:()
liborangepower::containers::Vec2	liborangepower_src/vec2_classes.hpp	/^class Vec2$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::Vec2::GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN	liborangepower_src/vec2_classes.hpp	/^	GEN_CM_BOTH_CONSTRUCTORS_AND_ASSIGN(Vec2);$/;"	kind:p	class:liborangepower::containers::Vec2	access:public	signature:(Vec2)
liborangepower::containers::Vec2::Vec2	liborangepower_src/vec2_classes.hpp	/^	inline Vec2() = default;$/;"	kind:p	class:liborangepower::containers::Vec2	access:public	signature:()
liborangepower::containers::Vec2::Vec2	liborangepower_src/vec2_classes.hpp	/^	inline Vec2(const Type& s_x, const Type& s_y)$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:(const Type & s_x,const Type & s_y)
liborangepower::containers::Vec2::x	liborangepower_src/vec2_classes.hpp	/^	Type x, y;$/;"	kind:m	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public
liborangepower::containers::Vec2::y	liborangepower_src/vec2_classes.hpp	/^	Type x, y;$/;"	kind:m	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public
liborangepower::containers::Vec2::~Vec2	liborangepower_src/vec2_classes.hpp	/^	virtual ~Vec2() = default;$/;"	kind:p	class:liborangepower::containers::Vec2	access:public	signature:()
liborangepower::integer_types	liborangepower_src/misc_types.hpp	/^namespace integer_types$/;"	kind:n	namespace:liborangepower
liborangepower::integer_types::s16	liborangepower_src/misc_types.hpp	/^typedef int16_t s16;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int16_t
liborangepower::integer_types::s32	liborangepower_src/misc_types.hpp	/^typedef int32_t s32;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int32_t
liborangepower::integer_types::s64	liborangepower_src/misc_types.hpp	/^typedef int64_t s64;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int64_t
liborangepower::integer_types::s8	liborangepower_src/misc_types.hpp	/^typedef int8_t s8;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int8_t
liborangepower::integer_types::u16	liborangepower_src/misc_types.hpp	/^typedef uint16_t u16;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint16_t
liborangepower::integer_types::u32	liborangepower_src/misc_types.hpp	/^typedef uint32_t u32;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint32_t
liborangepower::integer_types::u64	liborangepower_src/misc_types.hpp	/^typedef uint64_t u64;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint64_t
liborangepower::integer_types::u8	liborangepower_src/misc_types.hpp	/^typedef uint8_t u8;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint8_t
liborangepower::integer_types::uint	liborangepower_src/misc_types.hpp	/^typedef unsigned int uint;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:unsigned int
liborangepower::json	liborangepower_src/json_stuff.hpp	/^namespace json$/;"	kind:n	namespace:liborangepower
liborangepower::json	liborangepower_src/json_stuff/json_stuff.cpp	/^namespace json$/;"	kind:n	namespace:liborangepower	file:
liborangepower::json::debug_print_json	liborangepower_src/json_stuff.hpp	/^inline void debug_print_json(Json::Value* iter, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::Value * iter,std::ostream & os=std::cout,size_t tabs_level=0)
liborangepower::json::debug_print_json	liborangepower_src/json_stuff.hpp	/^void debug_print_json(const Json::Value& some_value, $/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os=std::cout,size_t tabs_level=0)
liborangepower::json::debug_print_json	liborangepower_src/json_stuff/json_stuff.cpp	/^void debug_print_json(const Json::Value& some_value, std::ostream& os, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os,size_t tabs_level)
liborangepower::json::get_json_value_type_as_str	liborangepower_src/json_stuff.hpp	/^inline std::string get_json_value_type_as_str(Json::Value* iter)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:std::string	signature:(Json::Value * iter)
liborangepower::json::get_json_value_type_as_str	liborangepower_src/json_stuff.hpp	/^std::string get_json_value_type_as_str(const Json::Value& some_value);$/;"	kind:p	namespace:liborangepower::json	typeref:typename:std::string	signature:(const Json::Value & some_value)
liborangepower::json::get_json_value_type_as_str	liborangepower_src/json_stuff/json_stuff.cpp	/^std::string get_json_value_type_as_str(const Json::Value& some_value)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:std::string	signature:(const Json::Value & some_value)
liborangepower::json::json_err	liborangepower_src/json_stuff/json_stuff.cpp	/^static void json_err(arg_types&&... args)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	file:	signature:(arg_types &&...args)
liborangepower::json::parse_json	liborangepower_src/json_stuff.hpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, $/;"	kind:p	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,const std::string & input_file_name,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff.hpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, std::istream& is,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,std::istream & is,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff.hpp	/^inline bool parse_json(const std::string& input_file_name, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(const std::string & input_file_name,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff.hpp	/^inline bool parse_json(std::istream& is, Json::Value* root, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(std::istream & is,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff/json_stuff.cpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,const std::string & input_file_name,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff/json_stuff.cpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, std::istream& is,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,std::istream & is,Json::Value * root,std::string * errs)
liborangepower::json::print_json_value_type	liborangepower_src/json_stuff.hpp	/^inline void print_json_value_type(Json::Value* iter, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::Value * iter,std::ostream & os=std::cout)
liborangepower::json::print_json_value_type	liborangepower_src/json_stuff.hpp	/^inline void print_json_value_type(const Json::Value& some_value,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os=std::cout)
liborangepower::json::write_json	liborangepower_src/json_stuff.hpp	/^inline void write_json(const std::string& output_file_name, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const std::string & output_file_name,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff.hpp	/^inline void write_json(std::ostream& os, Json::Value* root)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(std::ostream & os,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff.hpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,const std::string & output_file_name,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff.hpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,std::ostream & os,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff/json_stuff.cpp	/^void write_json(Json::StreamWriterBuilder* wbuilder, std::ostream& os, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,std::ostream & os,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff/json_stuff.cpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,const std::string & output_file_name,Json::Value * root)
liborangepower::lang	liborangepower_src/lexer_base_class.hpp	/^namespace lang$/;"	kind:n	namespace:liborangepower
liborangepower::lang	liborangepower_src/parser_base_class.hpp	/^namespace lang$/;"	kind:n	namespace:liborangepower
liborangepower::lang::LexerBase	liborangepower_src/lexer_base_class.hpp	/^class LexerBase$/;"	kind:c	namespace:liborangepower::lang
liborangepower::lang::LexerBase::LexerBase	liborangepower_src/lexer_base_class.hpp	/^	inline LexerBase(const std::string& s_filename, std::string* s_text,$/;"	kind:f	class:liborangepower::lang::LexerBase	access:public	signature:(const std::string & s_filename,std::string * s_text,TokType done_tok,TokType comment_tok)
liborangepower::lang::LexerBase::State	liborangepower_src/lexer_base_class.hpp	/^	class State$/;"	kind:c	class:liborangepower::lang::LexerBase	access:public
liborangepower::lang::LexerBase::State::State	liborangepower_src/lexer_base_class.hpp	/^		State()$/;"	kind:f	class:liborangepower::lang::LexerBase::State	access:public	signature:()
liborangepower::lang::LexerBase::State::_c	liborangepower_src/lexer_base_class.hpp	/^		int _c;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:int	access:private
liborangepower::lang::LexerBase::State::_line_num	liborangepower_src/lexer_base_class.hpp	/^		size_t _x = 0, _line_num = 1, _pos_in_line = 0;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:size_t	access:private
liborangepower::lang::LexerBase::State::_n	liborangepower_src/lexer_base_class.hpp	/^		bignum::BigNum _n;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:bignum::BigNum	access:private
liborangepower::lang::LexerBase::State::_pos_in_line	liborangepower_src/lexer_base_class.hpp	/^		size_t _x = 0, _line_num = 1, _pos_in_line = 0;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:size_t	access:private
liborangepower::lang::LexerBase::State::_s	liborangepower_src/lexer_base_class.hpp	/^		std::string _s;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:std::string	access:private
liborangepower::lang::LexerBase::State::_tok	liborangepower_src/lexer_base_class.hpp	/^		TokType _tok;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:TokType	access:private
liborangepower::lang::LexerBase::State::_x	liborangepower_src/lexer_base_class.hpp	/^		size_t _x = 0, _line_num = 1, _pos_in_line = 0;$/;"	kind:m	class:liborangepower::lang::LexerBase::State	typeref:typename:size_t	access:private
liborangepower::lang::LexerBase::State::operator !=	liborangepower_src/lexer_base_class.hpp	/^		inline bool operator != (const State& other) const$/;"	kind:f	class:liborangepower::lang::LexerBase::State	typeref:typename:bool	access:public	signature:(const State & other) const
liborangepower::lang::LexerBase::State::operator <	liborangepower_src/lexer_base_class.hpp	/^		inline bool operator < (const State& other) const$/;"	kind:f	class:liborangepower::lang::LexerBase::State	typeref:typename:bool	access:public	signature:(const State & other) const
liborangepower::lang::LexerBase::State::operator ==	liborangepower_src/lexer_base_class.hpp	/^		inline bool operator == (const State& other) const$/;"	kind:f	class:liborangepower::lang::LexerBase::State	typeref:typename:bool	access:public	signature:(const State & other) const
liborangepower::lang::LexerBase::State::~State	liborangepower_src/lexer_base_class.hpp	/^		~State()$/;"	kind:f	class:liborangepower::lang::LexerBase::State	typeref:typename:State	access:public	signature:()
liborangepower::lang::LexerBase::TokType	liborangepower_src/lexer_base_class.hpp	/^	using TokType = _TokType;$/;"	kind:t	class:liborangepower::lang::LexerBase	typeref:typename:_TokType	access:public
liborangepower::lang::LexerBase::_eat_whitespace	liborangepower_src/lexer_base_class.hpp	/^	void _eat_whitespace()$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:void	access:protected	signature:()
liborangepower::lang::LexerBase::_filename	liborangepower_src/lexer_base_class.hpp	/^	std::string _filename;$/;"	kind:m	class:liborangepower::lang::LexerBase	typeref:typename:std::string	access:protected
liborangepower::lang::LexerBase::_inner_next_tok	liborangepower_src/lexer_base_class.hpp	/^	virtual void _inner_next_tok() = 0;$/;"	kind:p	class:liborangepower::lang::LexerBase	typeref:typename:void	access:protected	signature:()
liborangepower::lang::LexerBase::_next_char	liborangepower_src/lexer_base_class.hpp	/^	int _next_char()$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:int	access:protected	signature:()
liborangepower::lang::LexerBase::_next_tok_no_test	liborangepower_src/lexer_base_class.hpp	/^	TokType _next_tok_no_test(TokType done_tok, TokType comment_tok)$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:TokType	access:protected	signature:(TokType done_tok,TokType comment_tok)
liborangepower::lang::LexerBase::_set_kw_tok	liborangepower_src/lexer_base_class.hpp	/^	inline bool _set_kw_tok$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:bool	access:protected	signature:(const std::map<TokType,std::string> & some_tok_ident_map)
liborangepower::lang::LexerBase::_set_tok	liborangepower_src/lexer_base_class.hpp	/^	void _set_tok(TokType n_tok, bool perf_next_char)$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:void	access:protected	signature:(TokType n_tok,bool perf_next_char)
liborangepower::lang::LexerBase::_state	liborangepower_src/lexer_base_class.hpp	/^	State _state;$/;"	kind:m	class:liborangepower::lang::LexerBase	typeref:typename:State	access:protected
liborangepower::lang::LexerBase::_text	liborangepower_src/lexer_base_class.hpp	/^	std::string* _text = nullptr;$/;"	kind:m	class:liborangepower::lang::LexerBase	typeref:typename:std::string *	access:protected
liborangepower::lang::LexerBase::c	liborangepower_src/lexer_base_class.hpp	/^	inline auto c() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
liborangepower::lang::LexerBase::line_num	liborangepower_src/lexer_base_class.hpp	/^	inline auto line_num() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
liborangepower::lang::LexerBase::n	liborangepower_src/lexer_base_class.hpp	/^	inline const auto& n() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:const auto &	access:public	signature:() const
liborangepower::lang::LexerBase::pos_in_line	liborangepower_src/lexer_base_class.hpp	/^	inline auto pos_in_line() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
liborangepower::lang::LexerBase::s	liborangepower_src/lexer_base_class.hpp	/^	inline const auto& s() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:const auto &	access:public	signature:() const
liborangepower::lang::LexerBase::src_code_chunk	liborangepower_src/lexer_base_class.hpp	/^	inline Type src_code_chunk(const State* other_state=nullptr) const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:Type	access:public	signature:(const State * other_state=nullptr) const
liborangepower::lang::LexerBase::tok	liborangepower_src/lexer_base_class.hpp	/^	inline auto tok() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
liborangepower::lang::LexerBase::x	liborangepower_src/lexer_base_class.hpp	/^	inline auto x() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
liborangepower::lang::LexerBase::~LexerBase	liborangepower_src/lexer_base_class.hpp	/^	virtual ~LexerBase()$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:LexerBase	access:public	signature:()
liborangepower::lang::ParserBase	liborangepower_src/parser_base_class.hpp	/^class ParserBase$/;"	kind:c	namespace:liborangepower::lang
liborangepower::lang::ParserBase::LexStateSets	liborangepower_src/parser_base_class.hpp	/^	class LexStateSets final$/;"	kind:c	class:liborangepower::lang::ParserBase	access:public
liborangepower::lang::ParserBase::LexStateSets::LexStateSets	liborangepower_src/parser_base_class.hpp	/^		LexStateSets()$/;"	kind:f	class:liborangepower::lang::ParserBase::LexStateSets	access:public	signature:()
liborangepower::lang::ParserBase::LexStateSets::dup_set	liborangepower_src/parser_base_class.hpp	/^		std::set<LexerState> found_set, dup_set;$/;"	kind:m	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:std::set<LexerState>	access:public
liborangepower::lang::ParserBase::LexStateSets::end	liborangepower_src/parser_base_class.hpp	/^		TokType end;$/;"	kind:m	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:TokType	access:public
liborangepower::lang::ParserBase::LexStateSets::first_dup	liborangepower_src/parser_base_class.hpp	/^		LexerState first_dup;$/;"	kind:m	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:LexerState	access:public
liborangepower::lang::ParserBase::LexStateSets::found_set	liborangepower_src/parser_base_class.hpp	/^		std::set<LexerState> found_set, dup_set;$/;"	kind:m	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:std::set<LexerState>	access:public
liborangepower::lang::ParserBase::LexStateSets::valid	liborangepower_src/parser_base_class.hpp	/^		inline bool valid() const$/;"	kind:f	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:bool	access:public	signature:() const
liborangepower::lang::ParserBase::LexStateSets::~LexStateSets	liborangepower_src/parser_base_class.hpp	/^		~LexStateSets()$/;"	kind:f	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:LexStateSets	access:public	signature:()
liborangepower::lang::ParserBase::LexerState	liborangepower_src/parser_base_class.hpp	/^	using LexerState = typename LexerType::State;$/;"	kind:t	class:liborangepower::lang::ParserBase	typeref:typename:LexerType::State	access:public
liborangepower::lang::ParserBase::ParserBase	liborangepower_src/parser_base_class.hpp	/^	ParserBase(std::vector<std::string>&& s_filename_vec)$/;"	kind:f	class:liborangepower::lang::ParserBase	access:public	signature:(std::vector<std::string> && s_filename_vec)
liborangepower::lang::ParserBase::TokToStringMap	liborangepower_src/parser_base_class.hpp	/^	using TokToStringMap = std::map<TokType, std::string>;$/;"	kind:t	class:liborangepower::lang::ParserBase	typeref:typename:std::map<TokType,std::string>	access:public
liborangepower::lang::ParserBase::TokType	liborangepower_src/parser_base_class.hpp	/^	using TokType = typename LexerType::TokType;$/;"	kind:t	class:liborangepower::lang::ParserBase	typeref:typename:LexerType::TokType	access:public
liborangepower::lang::ParserBase::_check_prefixed_tok_seq	liborangepower_src/parser_base_class.hpp	/^	bool _check_prefixed_tok_seq(const std::set<TokType>& prefix_set,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:protected	signature:(const std::set<TokType> & prefix_set,TokType end)
liborangepower::lang::ParserBase::_curr_file_index	liborangepower_src/parser_base_class.hpp	/^	size_t _curr_file_index = 0;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:size_t	access:protected
liborangepower::lang::ParserBase::_do_one_level_parse	liborangepower_src/parser_base_class.hpp	/^	bool _do_one_level_parse(FirstFuncType&& first_func,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:protected	signature:(FirstFuncType && first_func,RemFuncTypes &&...rem_funcs)
liborangepower::lang::ParserBase::_err	liborangepower_src/parser_base_class.hpp	/^	inline void _err(ArgTypes&&... args) const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(ArgTypes &&...args) const
liborangepower::lang::ParserBase::_err	liborangepower_src/parser_base_class.hpp	/^	inline void _err(const LexerState* lex_state, ArgTypes&&... args)$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const LexerState * lex_state,ArgTypes &&...args)
liborangepower::lang::ParserBase::_expect	liborangepower_src/parser_base_class.hpp	/^	void _expect(TokType tok, const TokToStringMap& some_tok_ident_map,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(TokType tok,const TokToStringMap & some_tok_ident_map,const LexerState & lex_state)
liborangepower::lang::ParserBase::_filename_vec	liborangepower_src/parser_base_class.hpp	/^	std::vector<std::string> _filename_vec;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:std::vector<std::string>	access:protected
liborangepower::lang::ParserBase::_just_test	liborangepower_src/parser_base_class.hpp	/^	bool _just_test = false;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:protected
liborangepower::lang::ParserBase::_lex_state	liborangepower_src/parser_base_class.hpp	/^	const LexerState& _lex_state() const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:const LexerState &	access:protected	signature:() const
liborangepower::lang::ParserBase::_lexer	liborangepower_src/parser_base_class.hpp	/^	LexerType& _lexer()$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:LexerType &	access:protected	signature:()
liborangepower::lang::ParserBase::_lexer	liborangepower_src/parser_base_class.hpp	/^	const LexerType& _lexer() const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:const LexerType &	access:protected	signature:() const
liborangepower::lang::ParserBase::_lexer_vec	liborangepower_src/parser_base_class.hpp	/^	std::vector<LexerType> _lexer_vec;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:std::vector<LexerType>	access:protected
liborangepower::lang::ParserBase::_lss	liborangepower_src/parser_base_class.hpp	/^	LexStateSets _lss;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:LexStateSets	access:protected
liborangepower::lang::ParserBase::_msg_for_expect	liborangepower_src/parser_base_class.hpp	/^	std::string _msg_for_expect(TokType tok,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:std::string	access:protected	signature:(TokType tok,const TokToStringMap & some_tok_ident_map,const LexerState & lex_state) const
liborangepower::lang::ParserBase::_next_lss_tokens	liborangepower_src/parser_base_class.hpp	/^	inline void _next_lss_tokens(const TokToStringMap& some_tok_ident_map)$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const TokToStringMap & some_tok_ident_map)
liborangepower::lang::ParserBase::_next_n_tokens	liborangepower_src/parser_base_class.hpp	/^	const std::vector<LexerState> _next_n_tokens(size_t n,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:const std::vector<LexerState>	access:protected	signature:(size_t n,bool affect_lexer)
liborangepower::lang::ParserBase::_next_tok	liborangepower_src/parser_base_class.hpp	/^	inline auto _next_tok(LexerType* lexer=nullptr)$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:auto	access:protected	signature:(LexerType * lexer=nullptr)
liborangepower::lang::ParserBase::_text_vec	liborangepower_src/parser_base_class.hpp	/^	std::vector<std::string*> _text_vec;$/;"	kind:m	class:liborangepower::lang::ParserBase	typeref:typename:std::vector<std::string * >	access:protected
liborangepower::lang::ParserBase::_to_next_in_list	liborangepower_src/parser_base_class.hpp	/^	bool _to_next_in_list(TokType end, TokType separator,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:protected	signature:(TokType end,TokType separator,const TokToStringMap & some_tok_ident_map,LexerType * lexer=nullptr)
liborangepower::lang::ParserBase::_unexpected	liborangepower_src/parser_base_class.hpp	/^	void _unexpected(const TokToStringMap& some_tok_ident_map,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const TokToStringMap & some_tok_ident_map,LexerType * lexer=nullptr)
liborangepower::lang::ParserBase::_unexpected	liborangepower_src/parser_base_class.hpp	/^	void _unexpected(const TokToStringMap& some_tok_ident_map,$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const TokToStringMap & some_tok_ident_map,const LexerState & lex_state)
liborangepower::lang::ParserBase::_warn	liborangepower_src/parser_base_class.hpp	/^	inline void _warn(ArgTypes&&... args) const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(ArgTypes &&...args) const
liborangepower::lang::ParserBase::_warn	liborangepower_src/parser_base_class.hpp	/^	inline void _warn(const LexerState* lex_state, ArgTypes&&... args)$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:void	access:protected	signature:(const LexerState * lex_state,ArgTypes &&...args)
liborangepower::lang::ParserBase::cmp_lex_tok	liborangepower_src/parser_base_class.hpp	/^	inline bool cmp_lex_tok(TokType to_cmp) const$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:bool	access:public	signature:(TokType to_cmp) const
liborangepower::lang::ParserBase::~ParserBase	liborangepower_src/parser_base_class.hpp	/^	virtual ~ParserBase()$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:ParserBase	access:public	signature:()
liborangepower::misc_input	liborangepower_src/misc_input_classes.hpp	/^namespace misc_input$/;"	kind:n	namespace:liborangepower
liborangepower::misc_input::get_istream_as_str	liborangepower_src/misc_input_classes.hpp	/^inline std::string get_istream_as_str(std::istream& to_get_from)$/;"	kind:f	namespace:liborangepower::misc_input	typeref:typename:std::string	signature:(std::istream & to_get_from)
liborangepower::misc_input::get_stdin_as_str	liborangepower_src/misc_input_classes.hpp	/^inline std::string get_stdin_as_str()$/;"	kind:f	namespace:liborangepower::misc_input	typeref:typename:std::string	signature:()
liborangepower::misc_util	liborangepower_src/memwhatever_wrappers.hpp	/^namespace misc_util$/;"	kind:n	namespace:liborangepower
liborangepower::misc_util	liborangepower_src/misc_utility_funcs.hpp	/^namespace misc_util$/;"	kind:n	namespace:liborangepower
liborangepower::misc_util::_init_array_backend	liborangepower_src/misc_utility_funcs.hpp	/^inline void _init_array_backend(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const Type & first_value,const RemainingTypes &...remaining_values)
liborangepower::misc_util::_init_array_backend	liborangepower_src/misc_utility_funcs.hpp	/^inline void _init_array_backend(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const Type & to_copy)
liborangepower::misc_util::anything_matches	liborangepower_src/misc_utility_funcs.hpp	/^bool anything_matches(const FirstArgType& first_val)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(const FirstArgType & first_val)
liborangepower::misc_util::anything_matches	liborangepower_src/misc_utility_funcs.hpp	/^bool anything_matches(const FirstArgType& first_val,$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(const FirstArgType & first_val,const SecondArgType & next,RemArgTypes &&...rem_args)
liborangepower::misc_util::arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(Type* dst, const void* src, size_t num_elems)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(Type * dst,const void * src,size_t num_elems)
liborangepower::misc_util::arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(std::array<Type, size>& dst, const void* src)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<Type,size> & dst,const void * src)
liborangepower::misc_util::arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(std::array<dst_type, size>& dst, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<dst_type,size> & dst,std::array<src_type,size> & src)
liborangepower::misc_util::arr_memset	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memset(Type* dst, int c, size_t num_elems)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(Type * dst,int c,size_t num_elems)
liborangepower::misc_util::arr_memset	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memset(std::array<Type, size>& dst, size_t src)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<Type,size> & dst,size_t src)
liborangepower::misc_util::cmpeq_array	liborangepower_src/misc_utility_funcs.hpp	/^bool cmpeq_array(FirstArgType* first_arr, SecondArgType* second_arr,$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(FirstArgType * first_arr,SecondArgType * second_arr,size_t size)
liborangepower::misc_util::custom_abs	liborangepower_src/misc_utility_funcs.hpp	/^inline Type custom_abs(const Type& val)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:Type	signature:(const Type & val)
liborangepower::misc_util::init_array	liborangepower_src/misc_utility_funcs.hpp	/^inline void init_array(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const AllTheTypes &...all_the_values)
liborangepower::misc_util::max_va	liborangepower_src/misc_utility_funcs.hpp	/^FirstArgType max_va(const FirstArgType& arg_0, const SecondArgType& arg_1)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstArgType	signature:(const FirstArgType & arg_0,const SecondArgType & arg_1)
liborangepower::misc_util::max_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstArgType max_va(const FirstArgType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstArgType	signature:(const FirstArgType & arg_0,const SecondArgType & arg_1,RemainingTypes...remaining_args)
liborangepower::misc_util::min_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstArgType min_va(const FirstArgType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstArgType	signature:(const FirstArgType & arg_0,const SecondArgType & arg_1)
liborangepower::misc_util::min_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstArgType min_va(const FirstArgType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstArgType	signature:(const FirstArgType & arg_0,const SecondArgType & arg_1,RemainingTypes...remaining_args)
liborangepower::misc_util::type_is_signed	liborangepower_src/misc_utility_funcs.hpp	/^constexpr inline bool type_is_signed()$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:()
liborangepower::mpi	liborangepower_src/mpi_handler_class.hpp	/^namespace mpi$/;"	kind:n	namespace:liborangepower
liborangepower::mpi::MpiHandler	liborangepower_src/mpi_handler_class.hpp	/^class MpiHandler$/;"	kind:c	namespace:liborangepower::mpi
liborangepower::mpi::MpiHandler::DidQuitWithMiscOutput	liborangepower_src/mpi_handler_class.hpp	/^		DidQuitWithMiscOutput,$/;"	kind:e	enum:liborangepower::mpi::MpiHandler::ErrorCode	access:public
liborangepower::mpi::MpiHandler::ErrorCode	liborangepower_src/mpi_handler_class.hpp	/^	enum class ErrorCode : int$/;"	kind:g	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public
liborangepower::mpi::MpiHandler::FakeError	liborangepower_src/mpi_handler_class.hpp	/^		FakeError,$/;"	kind:e	enum:liborangepower::mpi::MpiHandler::ErrorCode	access:public
liborangepower::mpi::MpiHandler::MpiHandler	liborangepower_src/mpi_handler_class.hpp	/^	inline MpiHandler(int& s_argc, char** s_argv,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	access:public	signature:(int & s_argc,char ** s_argv,size_t s_num_threads_per_proc=1,size_t s_min_world_size=1)
liborangepower::mpi::MpiHandler::SizeTooBig	liborangepower_src/mpi_handler_class.hpp	/^		SizeTooBig,$/;"	kind:e	enum:liborangepower::mpi::MpiHandler::ErrorCode	access:public
liborangepower::mpi::MpiHandler::TooFewProcs	liborangepower_src/mpi_handler_class.hpp	/^		TooFewProcs,$/;"	kind:e	enum:liborangepower::mpi::MpiHandler::ErrorCode	access:public
liborangepower::mpi::MpiHandler::_argc_ptr	liborangepower_src/mpi_handler_class.hpp	/^	int* _argc_ptr;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:int *	access:protected
liborangepower::mpi::MpiHandler::_argv_ptr	liborangepower_src/mpi_handler_class.hpp	/^	char*** _argv_ptr;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:char ***	access:protected
liborangepower::mpi::MpiHandler::_min_world_size	liborangepower_src/mpi_handler_class.hpp	/^	size_t _num_threads_per_proc, _min_world_size;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:size_t	access:protected
liborangepower::mpi::MpiHandler::_num_threads_per_proc	liborangepower_src/mpi_handler_class.hpp	/^	size_t _num_threads_per_proc, _min_world_size;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:size_t	access:protected
liborangepower::mpi::MpiHandler::_world_rank	liborangepower_src/mpi_handler_class.hpp	/^	int _world_rank, _world_size;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected
liborangepower::mpi::MpiHandler::_world_size	liborangepower_src/mpi_handler_class.hpp	/^	int _world_rank, _world_size;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected
liborangepower::mpi::MpiHandler::argc	liborangepower_src/mpi_handler_class.hpp	/^	inline int argc() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:() const
liborangepower::mpi::MpiHandler::argv	liborangepower_src/mpi_handler_class.hpp	/^	inline char** argv() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:char **	access:public	signature:() const
liborangepower::mpi::MpiHandler::quit_with_misc_output	liborangepower_src/mpi_handler_class.hpp	/^	inline void quit_with_misc_output(arg_types&&... args) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:void	access:protected	signature:(arg_types &&...args) const
liborangepower::mpi::MpiHandler::raw_abort	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_abort(MPI_Comm comm, int ec) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(MPI_Comm comm,int ec) const
liborangepower::mpi::MpiHandler::raw_comm_rank	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_comm_rank(MPI_Comm comm) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(MPI_Comm comm) const
liborangepower::mpi::MpiHandler::raw_comm_size	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_comm_size(MPI_Comm comm) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(MPI_Comm comm) const
liborangepower::mpi::MpiHandler::raw_finalize	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_finalize() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:() const
liborangepower::mpi::MpiHandler::raw_init	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_init(int& argc, char**& argv) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(int & argc,char ** & argv) const
liborangepower::mpi::MpiHandler::recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int recv(ArrType& buf, int src,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(ArrType & buf,int src,int tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
liborangepower::mpi::MpiHandler::recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int recv(Type* buf, int num_instances, int src, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(Type * buf,int num_instances,int src,int tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
liborangepower::mpi::MpiHandler::recv_single	liborangepower_src/mpi_handler_class.hpp	/^	inline int recv_single(Type& some_var, int src, int tag=MPI_ANY_TAG,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(Type & some_var,int src,int tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
liborangepower::mpi::MpiHandler::reduce	liborangepower_src/mpi_handler_class.hpp	/^	inline int reduce(const void* send_buf, void* recv_buf, int count, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const void * send_buf,void * recv_buf,int count,MPI_Datatype data_type,MPI_Op op,int root,MPI_Comm comm=MPI_COMM_WORLD) const
liborangepower::mpi::MpiHandler::regular_abort	liborangepower_src/mpi_handler_class.hpp	/^	inline int regular_abort(const ErrorCode& ec) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(const ErrorCode & ec) const
liborangepower::mpi::MpiHandler::root	liborangepower_src/mpi_handler_class.hpp	/^	static constexpr int root = 0;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public
liborangepower::mpi::MpiHandler::send	liborangepower_src/mpi_handler_class.hpp	/^	inline int send(const ArrType& buf, int dst, int tag=0,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const ArrType & buf,int dst,int tag=0,MPI_Comm comm=MPI_COMM_WORLD) const
liborangepower::mpi::MpiHandler::send	liborangepower_src/mpi_handler_class.hpp	/^	inline int send(const Type* buf, int num_instances, int dst, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type * buf,int num_instances,int dst,int tag=0,MPI_Comm comm=MPI_COMM_WORLD) const
liborangepower::mpi::MpiHandler::send_recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int send_recv(const Type* send_buf, int num_send_instances, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type * send_buf,int num_send_instances,int dst,Type * recv_buf,int num_recv_instances,int src,int send_tag=0,int recv_tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
liborangepower::mpi::MpiHandler::send_recv_single	liborangepower_src/mpi_handler_class.hpp	/^	inline int send_recv_single(const Type& to_send, Type& to_recv, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type & to_send,Type & to_recv,int partner,int send_tag=0,int recv_tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
liborangepower::mpi::MpiHandler::send_recv_single	liborangepower_src/mpi_handler_class.hpp	/^	inline int send_recv_single(const Type& to_send, int dst, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type & to_send,int dst,Type & to_recv,int src,int send_tag=0,int recv_tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
liborangepower::mpi::MpiHandler::send_single	liborangepower_src/mpi_handler_class.hpp	/^	inline int send_single(const Type& some_var, int dst, int tag=0,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type & some_var,int dst,int tag=0,MPI_Comm comm=MPI_COMM_WORLD) const
liborangepower::mpi::MpiHandler::starting_thread_num	liborangepower_src/mpi_handler_class.hpp	/^	inline size_t starting_thread_num() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:size_t	access:public	signature:() const
liborangepower::mpi::MpiHandler::total_num_threads	liborangepower_src/mpi_handler_class.hpp	/^	inline size_t total_num_threads() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:size_t	access:public	signature:() const
liborangepower::mpi::MpiHandler::wrapped_recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int wrapped_recv(Type* buf, int num_instances, int src,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(Type * buf,int num_instances,int src,int tag,MPI_Comm comm,MPI_Status * status) const
liborangepower::mpi::MpiHandler::wrapped_send	liborangepower_src/mpi_handler_class.hpp	/^	inline int wrapped_send(const Type* buf, int num_instances, int dst, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(const Type * buf,int num_instances,int dst,int tag,MPI_Comm comm) const
liborangepower::mpi::MpiHandler::wrapped_send_recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int wrapped_send_recv(const Type* send_buf, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(const Type * send_buf,int num_send_instances,int dst,int send_tag,Type * recv_buf,int num_recv_instances,int src,int recv_tag,MPI_Comm comm,MPI_Status * status) const
liborangepower::mpi::MpiHandler::~MpiHandler	liborangepower_src/mpi_handler_class.hpp	/^	virtual inline ~MpiHandler()$/;"	kind:f	class:liborangepower::mpi::MpiHandler	access:public	signature:()
liborangepower::printout_etc	liborangepower_src/misc_output_classes.hpp	/^namespace printout_etc$/;"	kind:n	namespace:liborangepower
liborangepower::printout_etc::AnyPrintoutBackend	liborangepower_src/misc_output_classes.hpp	/^class AnyPrintoutBackend$/;"	kind:c	namespace:liborangepower::printout_etc
liborangepower::printout_etc::AnyPrintoutBackend::func	liborangepower_src/misc_output_classes.hpp	/^	static void func(std::ostream& os, FirstArgType&& first_val, $/;"	kind:f	class:liborangepower::printout_etc::AnyPrintoutBackend	typeref:typename:void	access:private	signature:(std::ostream & os,FirstArgType && first_val,RemArgTypes &&...rem_args)
liborangepower::printout_etc::fprintout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& fprintout(std::ostream& out_file, ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & out_file,ArgTypes &&...args)
liborangepower::printout_etc::osprint_arr	liborangepower_src/misc_output_classes.hpp	/^std::ostream& osprint_arr(std::ostream& os, ArrType* to_print, size_t size)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArrType * to_print,size_t size)
liborangepower::printout_etc::osprintout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& osprintout(std::ostream& os, ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArgTypes &&...args)
liborangepower::printout_etc::osprintout	liborangepower_src/misc_output_classes.hpp	/^std::ostream& osprintout(std::ostream& os, ArgTypes&&... args);$/;"	kind:p	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArgTypes &&...args)
liborangepower::printout_etc::printerr	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& printerr(ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(ArgTypes &&...args)
liborangepower::printout_etc::printout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& printout(ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(ArgTypes &&...args)
liborangepower::printout_etc::sconcat	liborangepower_src/misc_output_classes.hpp	/^std::string sconcat(const FirstArgType& first_val, $/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstArgType & first_val,RemArgTypes &&...rem_args)
liborangepower::printout_etc::strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom()$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:()
liborangepower::printout_etc::strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom(const FirstArgType& first_val,$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstArgType & first_val,RemArgTypes &&...rem_args)
liborangepower::printout_etc::strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom(const Type& to_concat)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const Type & to_concat)
liborangepower::printout_etc::strappcom2	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom2(const FirstArgType& first_val,$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstArgType & first_val,RemArgTypes &&...rem_args)
liborangepower::range	liborangepower_src/range_funcs.hpp	/^namespace range$/;"	kind:n	namespace:liborangepower
liborangepower::range::clamp_to_range	liborangepower_src/range_funcs.hpp	/^inline Type clamp_to_range(Type range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:Type	signature:(Type range_start_inclusive,Type range_end_exclusive,Type to_clamp)
liborangepower::range::in_range	liborangepower_src/range_funcs.hpp	/^inline bool in_range(FirstArgType range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(FirstArgType range_start_inclusive,SecondArgType range_end_exclusive,ThirdArgType to_check)
liborangepower::range::in_range_inclusive	liborangepower_src/range_funcs.hpp	/^inline bool in_range_inclusive(FirstArgType range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(FirstArgType range_start_inclusive,SecondArgType range_end_inclusive,ThirdArgType to_check)
liborangepower::strings	liborangepower_src/string_conversion_stuff.hpp	/^namespace strings$/;"	kind:n	namespace:liborangepower
liborangepower::strings::convert_str_to	liborangepower_src/string_conversion_stuff.hpp	/^inline Type convert_str_to(const std::string& to_convert)$/;"	kind:f	namespace:liborangepower::strings	typeref:typename:Type	signature:(const std::string & to_convert)
liborangepower::time	liborangepower_src/time_stuff.hpp	/^namespace time$/;"	kind:n	namespace:liborangepower
liborangepower::time::Prng	liborangepower_src/time_stuff.hpp	/^class Prng$/;"	kind:c	namespace:liborangepower::time
liborangepower::time::Prng::InstanceType	liborangepower_src/time_stuff.hpp	/^	typedef std::mt19937_64 InstanceType;$/;"	kind:t	class:liborangepower::time::Prng	typeref:typename:std::mt19937_64	access:public
liborangepower::time::Prng::Prng	liborangepower_src/time_stuff.hpp	/^	inline Prng(SeedType s_seed)$/;"	kind:f	class:liborangepower::time::Prng	access:public	signature:(SeedType s_seed)
liborangepower::time::Prng::Prng	liborangepower_src/time_stuff.hpp	/^	inline Prng(int s_param_0=0, int s_param_1=0) $/;"	kind:f	class:liborangepower::time::Prng	access:public	signature:(int s_param_0=0,int s_param_1=0)
liborangepower::time::Prng::SeedType	liborangepower_src/time_stuff.hpp	/^		.time_since_epoch().count()) SeedType;$/;"	kind:t	class:liborangepower::time::Prng	access:public
liborangepower::time::Prng::_default_initial_seed	liborangepower_src/time_stuff.hpp	/^	inline SeedType _default_initial_seed()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:SeedType	access:protected	signature:()
liborangepower::time::Prng::_instance	liborangepower_src/time_stuff.hpp	/^	InstanceType _instance;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:InstanceType	access:protected
liborangepower::time::Prng::_param_0	liborangepower_src/time_stuff.hpp	/^	int _param_0, _param_1;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:int	access:protected
liborangepower::time::Prng::_param_1	liborangepower_src/time_stuff.hpp	/^	int _param_0, _param_1;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:int	access:protected
liborangepower::time::Prng::operator () 	liborangepower_src/time_stuff.hpp	/^	inline auto operator () ()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:()
liborangepower::time::Prng::operator () 	liborangepower_src/time_stuff.hpp	/^	inline auto operator () (integer_types::u64 max_val, $/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:(integer_types::u64 max_val,const bool saturate=false)
liborangepower::time::Prng::run	liborangepower_src/time_stuff.hpp	/^	inline auto run()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:()
liborangepower::time::Prng::~Prng	liborangepower_src/time_stuff.hpp	/^	virtual ~Prng() = default;$/;"	kind:p	class:liborangepower::time::Prng	access:public	signature:()
liborangepower::time::Profiler	liborangepower_src/time_stuff.hpp	/^class Profiler$/;"	kind:c	namespace:liborangepower::time
liborangepower::time::Profiler::end_tp	liborangepower_src/time_stuff.hpp	/^	std::chrono::high_resolution_clock::time_point start_tp, end_tp;$/;"	kind:m	class:liborangepower::time::Profiler	typeref:typename:std::chrono::high_resolution_clock::time_point	access:protected
liborangepower::time::Profiler::get_hrc_now	liborangepower_src/time_stuff.hpp	/^	static inline auto get_hrc_now()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
liborangepower::time::Profiler::get_hrc_now_time_t	liborangepower_src/time_stuff.hpp	/^	static inline auto get_hrc_now_time_t()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
liborangepower::time::Profiler::start	liborangepower_src/time_stuff.hpp	/^	inline void start()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:void	access:public	signature:()
liborangepower::time::Profiler::start_tp	liborangepower_src/time_stuff.hpp	/^	std::chrono::high_resolution_clock::time_point start_tp, end_tp;$/;"	kind:m	class:liborangepower::time::Profiler	typeref:typename:std::chrono::high_resolution_clock::time_point	access:protected
liborangepower::time::Profiler::stop	liborangepower_src/time_stuff.hpp	/^	inline auto stop()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
liborangepower::time::now_as_gmtime	liborangepower_src/time_stuff.hpp	/^inline std::tm* now_as_gmtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::tm *	signature:()
liborangepower::time::now_as_localtime	liborangepower_src/time_stuff.hpp	/^inline std::tm* now_as_localtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::tm *	signature:()
liborangepower::time::now_as_time_t	liborangepower_src/time_stuff.hpp	/^inline std::time_t now_as_time_t()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::time_t	signature:()
liborangepower::time::put_now_as_gmtime	liborangepower_src/time_stuff.hpp	/^inline auto put_now_as_gmtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:auto	signature:()
liborangepower::time::put_now_as_localtime	liborangepower_src/time_stuff.hpp	/^inline auto put_now_as_localtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:auto	signature:()
liborangepower_array_2d_helper_classes_hpp	liborangepower_src/array_2d_helper_classes.hpp	/^#define liborangepower_array_2d_helper_classes_hpp$/;"	kind:d
liborangepower_array_helper_classes_hpp	liborangepower_src/array_helper_classes.hpp	/^#define liborangepower_array_helper_classes_hpp$/;"	kind:d
liborangepower_gen_class_innards_defines_hpp	liborangepower_src/gen_class_innards_defines.hpp	/^#define liborangepower_gen_class_innards_defines_hpp$/;"	kind:d
liborangepower_gmp_stuff_hpp	liborangepower_src/gmp_stuff.hpp	/^#define liborangepower_gmp_stuff_hpp$/;"	kind:d
liborangepower_json_stuff_hpp	liborangepower_src/json_stuff.hpp	/^#define liborangepower_json_stuff_hpp$/;"	kind:d
liborangepower_lexer_base_class_hpp	liborangepower_src/lexer_base_class.hpp	/^#define liborangepower_lexer_base_class_hpp$/;"	kind:d
liborangepower_lexer_classes_hpp	liborangepower_src/quoted_str_converter_stuff.hpp	/^#define liborangepower_lexer_classes_hpp$/;"	kind:d
liborangepower_linked_list_classes_hpp	liborangepower_src/linked_list_classes.hpp	/^#define liborangepower_linked_list_classes_hpp$/;"	kind:d
liborangepower_memwhatever_wrappers_hpp	liborangepower_src/memwhatever_wrappers.hpp	/^#define liborangepower_memwhatever_wrappers_hpp$/;"	kind:d
liborangepower_misc_bitwise_funcs_hpp	liborangepower_src/misc_bitwise_funcs.hpp	/^#define liborangepower_misc_bitwise_funcs_hpp$/;"	kind:d
liborangepower_misc_defines_hpp	liborangepower_src/misc_defines.hpp	/^#define liborangepower_misc_defines_hpp$/;"	kind:d
liborangepower_misc_includes_hpp	liborangepower_src/misc_includes.hpp	/^#define liborangepower_misc_includes_hpp$/;"	kind:d
liborangepower_misc_input_classes_hpp	liborangepower_src/misc_input_classes.hpp	/^#define liborangepower_misc_input_classes_hpp$/;"	kind:d
liborangepower_misc_output_classes_hpp	liborangepower_src/misc_output_classes.hpp	/^#define liborangepower_misc_output_classes_hpp$/;"	kind:d
liborangepower_misc_types_hpp	liborangepower_src/misc_types.hpp	/^#define liborangepower_misc_types_hpp$/;"	kind:d
liborangepower_misc_utility_funcs_hpp	liborangepower_src/misc_utility_funcs.hpp	/^#define liborangepower_misc_utility_funcs_hpp$/;"	kind:d
liborangepower_mp11_defines_hpp	liborangepower_src/mp11_defines.hpp	/^#define liborangepower_mp11_defines_hpp$/;"	kind:d
liborangepower_mpi_handler_class_hpp	liborangepower_src/mpi_handler_class.hpp	/^#define liborangepower_mpi_handler_class_hpp$/;"	kind:d
liborangepower_parser_base_class_hpp	liborangepower_src/parser_base_class.hpp	/^#define liborangepower_parser_base_class_hpp$/;"	kind:d
liborangepower_prev_curr_pair_classes_hpp	liborangepower_src/prev_curr_pair_classes.hpp	/^#define liborangepower_prev_curr_pair_classes_hpp$/;"	kind:d
liborangepower_range_funcs_hpp	liborangepower_src/range_funcs.hpp	/^#define liborangepower_range_funcs_hpp$/;"	kind:d
liborangepower_str_split_helper_classes_hpp	liborangepower_src/deprecated/str_split_helper_classes.hpp	/^#define liborangepower_str_split_helper_classes_hpp$/;"	kind:d
liborangepower_string_conversion_stuff_hpp	liborangepower_src/string_conversion_stuff.hpp	/^#define liborangepower_string_conversion_stuff_hpp$/;"	kind:d
liborangepower_time_stuff_hpp	liborangepower_src/time_stuff.hpp	/^#define liborangepower_time_stuff_hpp$/;"	kind:d
liborangepower_vec2_classes_hpp	liborangepower_src/vec2_classes.hpp	/^#define liborangepower_vec2_classes_hpp$/;"	kind:d
liborangepower_with_defines_hpp	liborangepower_src/with_defines.hpp	/^#define liborangepower_with_defines_hpp$/;"	kind:d
line_num	liborangepower_src/lexer_base_class.hpp	/^	inline auto line_num() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
main	main.cpp	/^int main(int argc, char** argv)$/;"	kind:f	typeref:typename:int	signature:(int argc,char ** argv)
max_va	liborangepower_src/misc_utility_funcs.hpp	/^FirstArgType max_va(const FirstArgType& arg_0, const SecondArgType& arg_1)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstArgType	signature:(const FirstArgType & arg_0,const SecondArgType & arg_1)
max_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstArgType max_va(const FirstArgType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstArgType	signature:(const FirstArgType & arg_0,const SecondArgType & arg_1,RemainingTypes...remaining_args)
min_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstArgType min_va(const FirstArgType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstArgType	signature:(const FirstArgType & arg_0,const SecondArgType & arg_1)
min_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstArgType min_va(const FirstArgType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstArgType	signature:(const FirstArgType & arg_0,const SecondArgType & arg_1,RemainingTypes...remaining_args)
misc_input	liborangepower_src/misc_input_classes.hpp	/^namespace misc_input$/;"	kind:n	namespace:liborangepower
misc_util	liborangepower_src/memwhatever_wrappers.hpp	/^namespace misc_util$/;"	kind:n	namespace:liborangepower
misc_util	liborangepower_src/misc_utility_funcs.hpp	/^namespace misc_util$/;"	kind:n	namespace:liborangepower
mpi	liborangepower_src/mpi_handler_class.hpp	/^namespace mpi$/;"	kind:n	namespace:liborangepower
n	liborangepower_src/lexer_base_class.hpp	/^	inline const auto& n() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:const auto &	access:public	signature:() const
next_tok	ast_gen_class.cpp	/^Tok Lexer::next_tok(bool just_test)$/;"	kind:f	class:Lexer	typeref:typename:Tok	signature:(bool just_test)
next_tok	ast_gen_class.hpp	/^	Tok next_tok(bool just_test);$/;"	kind:p	class:Lexer	typeref:typename:Tok	access:public	signature:(bool just_test)
node_base_str	ast_gen_class.cpp	/^const string AstGen::node_base_str$/;"	kind:m	class:AstGen	typeref:typename:const string
node_base_str	ast_gen_class.hpp	/^	static const string node_base_str, node_list_str;$/;"	kind:m	class:AstGen	typeref:typename:const string	access:public
node_list_str	ast_gen_class.cpp	/^const string AstGen::node_list_str$/;"	kind:m	class:AstGen	typeref:typename:const string
node_list_str	ast_gen_class.hpp	/^	static const string node_base_str, node_list_str;$/;"	kind:m	class:AstGen	typeref:typename:const string	access:public
now_as_gmtime	liborangepower_src/time_stuff.hpp	/^inline std::tm* now_as_gmtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::tm *	signature:()
now_as_localtime	liborangepower_src/time_stuff.hpp	/^inline std::tm* now_as_localtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::tm *	signature:()
now_as_time_t	liborangepower_src/time_stuff.hpp	/^inline std::time_t now_as_time_t()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::time_t	signature:()
operator !=	liborangepower_src/lexer_base_class.hpp	/^		inline bool operator != (const State& other) const$/;"	kind:f	class:liborangepower::lang::LexerBase::State	typeref:typename:bool	access:public	signature:(const State & other) const
operator !=	liborangepower_src/linked_list_classes.hpp	/^		inline bool operator != (const NodeIterator& other) const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:bool	access:public	signature:(const NodeIterator & other) const
operator () 	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline Type& operator () ()$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:Type &	access:public	signature:()
operator () 	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline Type& operator () ()$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:Type &	access:public	signature:()
operator () 	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline const Type& operator () () const$/;"	kind:f	class:liborangepower::containers::MoveOnlyPrevCurrPair	typeref:typename:const Type &	access:public	signature:() const
operator () 	liborangepower_src/prev_curr_pair_classes.hpp	/^	inline const Type& operator () () const$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:const Type &	access:public	signature:() const
operator () 	liborangepower_src/time_stuff.hpp	/^	inline auto operator () ()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:()
operator () 	liborangepower_src/time_stuff.hpp	/^	inline auto operator () (integer_types::u64 max_val, $/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:(integer_types::u64 max_val,const bool saturate=false)
operator *	liborangepower_src/linked_list_classes.hpp	/^		inline Node& operator * () const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:Node &	access:public	signature:() const
operator ++	liborangepower_src/linked_list_classes.hpp	/^		inline NodeIterator& operator ++ ()$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:NodeIterator &	access:public	signature:()
operator --	liborangepower_src/linked_list_classes.hpp	/^		inline NodeIterator& operator -- ()$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:NodeIterator &	access:public	signature:()
operator ->	liborangepower_src/linked_list_classes.hpp	/^		inline Node* operator -> () const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:Node *	access:public	signature:() const
operator <	liborangepower_src/lexer_base_class.hpp	/^		inline bool operator < (const State& other) const$/;"	kind:f	class:liborangepower::lang::LexerBase::State	typeref:typename:bool	access:public	signature:(const State & other) const
operator =	liborangepower_src/array_2d_helper_classes.hpp	/^	Array2dHelper& operator = (const Array2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::Array2dHelper	typeref:typename:Array2dHelper &	access:public	signature:(const Array2dHelper & to_copy)
operator =	liborangepower_src/array_2d_helper_classes.hpp	/^	ArrayCsz2dHelper& operator = (const ArrayCsz2dHelper& to_copy) $/;"	kind:p	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:ArrayCsz2dHelper &	access:public	signature:(const ArrayCsz2dHelper & to_copy)
operator =	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper& operator = (const ArrayCszHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCszHelper	typeref:typename:ArrayCszHelper &	access:public	signature:(const ArrayCszHelper & to_copy)
operator =	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper& operator = (const ArrayHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayHelper	typeref:typename:ArrayHelper &	access:public	signature:(const ArrayHelper & to_copy)
operator ==	liborangepower_src/lexer_base_class.hpp	/^		inline bool operator == (const State& other) const$/;"	kind:f	class:liborangepower::lang::LexerBase::State	typeref:typename:bool	access:public	signature:(const State & other) const
operator ==	liborangepower_src/linked_list_classes.hpp	/^		inline bool operator == (const NodeIterator& other) const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	typeref:typename:bool	access:public	signature:(const NodeIterator & other) const
operator Node*	liborangepower_src/linked_list_classes.hpp	/^		inline operator Node* () const$/;"	kind:f	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:() const
osprint_arr	liborangepower_src/misc_output_classes.hpp	/^std::ostream& osprint_arr(std::ostream& os, ArrType* to_print, size_t size)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArrType * to_print,size_t size)
osprintout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& osprintout(std::ostream& os, ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArgTypes &&...args)
osprintout	liborangepower_src/misc_output_classes.hpp	/^std::ostream& osprintout(std::ostream& os, ArgTypes&&... args);$/;"	kind:p	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArgTypes &&...args)
parse_json	liborangepower_src/json_stuff.hpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, $/;"	kind:p	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,const std::string & input_file_name,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff.hpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, std::istream& is,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,std::istream & is,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff.hpp	/^inline bool parse_json(const std::string& input_file_name, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(const std::string & input_file_name,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff.hpp	/^inline bool parse_json(std::istream& is, Json::Value* root, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(std::istream & is,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff/json_stuff.cpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,const std::string & input_file_name,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff/json_stuff.cpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, std::istream& is,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,std::istream & is,Json::Value * root,std::string * errs)
pop_back	liborangepower_src/linked_list_classes.hpp	/^	inline void pop_back()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:()
pop_front	liborangepower_src/linked_list_classes.hpp	/^	inline void pop_front()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:()
pos_in_line	liborangepower_src/lexer_base_class.hpp	/^	inline auto pos_in_line() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
print_json_value_type	liborangepower_src/json_stuff.hpp	/^inline void print_json_value_type(Json::Value* iter, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::Value * iter,std::ostream & os=std::cout)
print_json_value_type	liborangepower_src/json_stuff.hpp	/^inline void print_json_value_type(const Json::Value& some_value,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os=std::cout)
printerr	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& printerr(ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(ArgTypes &&...args)
printout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& printout(ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(ArgTypes &&...args)
printout_etc	liborangepower_src/misc_output_classes.hpp	/^namespace printout_etc$/;"	kind:n	namespace:liborangepower
push_back	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator push_back(Type&& to_push)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Type && to_push)
push_back	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator push_back(const Type& to_push)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(const Type & to_push)
push_front	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator push_front(Type&& to_push)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(Type && to_push)
push_front	liborangepower_src/linked_list_classes.hpp	/^	inline NodeIterator push_front(const Type& to_push)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:NodeIterator	access:public	signature:(const Type & to_push)
put_now_as_gmtime	liborangepower_src/time_stuff.hpp	/^inline auto put_now_as_gmtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:auto	signature:()
put_now_as_localtime	liborangepower_src/time_stuff.hpp	/^inline auto put_now_as_localtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:auto	signature:()
quit_with_misc_output	liborangepower_src/mpi_handler_class.hpp	/^	inline void quit_with_misc_output(arg_types&&... args) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:void	access:protected	signature:(arg_types &&...args) const
range	liborangepower_src/range_funcs.hpp	/^namespace range$/;"	kind:n	namespace:liborangepower
raw_abort	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_abort(MPI_Comm comm, int ec) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(MPI_Comm comm,int ec) const
raw_comm_rank	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_comm_rank(MPI_Comm comm) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(MPI_Comm comm) const
raw_comm_size	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_comm_size(MPI_Comm comm) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(MPI_Comm comm) const
raw_finalize	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_finalize() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:() const
raw_init	liborangepower_src/mpi_handler_class.hpp	/^	inline int raw_init(int& argc, char**& argv) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(int & argc,char ** & argv) const
recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int recv(ArrType& buf, int src,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(ArrType & buf,int src,int tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int recv(Type* buf, int num_instances, int src, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(Type * buf,int num_instances,int src,int tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
recv_single	liborangepower_src/mpi_handler_class.hpp	/^	inline int recv_single(Type& some_var, int src, int tag=MPI_ANY_TAG,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(Type & some_var,int src,int tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
reduce	liborangepower_src/mpi_handler_class.hpp	/^	inline int reduce(const void* send_buf, void* recv_buf, int count, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const void * send_buf,void * recv_buf,int count,MPI_Datatype data_type,MPI_Op op,int root,MPI_Comm comm=MPI_COMM_WORLD) const
regular_abort	liborangepower_src/mpi_handler_class.hpp	/^	inline int regular_abort(const ErrorCode& ec) const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(const ErrorCode & ec) const
remove	liborangepower_src/linked_list_classes.hpp	/^	inline void remove(Node* where)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:(Node * where)
remove_after	liborangepower_src/linked_list_classes.hpp	/^	inline void remove_after(Node* where)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:(Node * where)
remove_before	liborangepower_src/linked_list_classes.hpp	/^	inline void remove_before(Node* where)$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:void	access:public	signature:(Node * where)
root	liborangepower_src/mpi_handler_class.hpp	/^	static constexpr int root = 0;$/;"	kind:m	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public
run	ast_gen_class.cpp	/^void AstGen::run()$/;"	kind:f	class:AstGen	typeref:typename:void	signature:()
run	ast_gen_class.hpp	/^	void run();$/;"	kind:p	class:AstGen	typeref:typename:void	access:public	signature:()
run	liborangepower_src/time_stuff.hpp	/^	inline auto run()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:()
s	liborangepower_src/lexer_base_class.hpp	/^	inline const auto& s() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:const auto &	access:public	signature:() const
s16	liborangepower_src/misc_types.hpp	/^typedef int16_t s16;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int16_t
s32	liborangepower_src/misc_types.hpp	/^typedef int32_t s32;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int32_t
s64	liborangepower_src/misc_types.hpp	/^typedef int64_t s64;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int64_t
s8	liborangepower_src/misc_types.hpp	/^typedef int8_t s8;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int8_t
sconcat	liborangepower_src/misc_output_classes.hpp	/^std::string sconcat(const FirstArgType& first_val, $/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstArgType & first_val,RemArgTypes &&...rem_args)
send	liborangepower_src/mpi_handler_class.hpp	/^	inline int send(const ArrType& buf, int dst, int tag=0,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const ArrType & buf,int dst,int tag=0,MPI_Comm comm=MPI_COMM_WORLD) const
send	liborangepower_src/mpi_handler_class.hpp	/^	inline int send(const Type* buf, int num_instances, int dst, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type * buf,int num_instances,int dst,int tag=0,MPI_Comm comm=MPI_COMM_WORLD) const
send_recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int send_recv(const Type* send_buf, int num_send_instances, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type * send_buf,int num_send_instances,int dst,Type * recv_buf,int num_recv_instances,int src,int send_tag=0,int recv_tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
send_recv_single	liborangepower_src/mpi_handler_class.hpp	/^	inline int send_recv_single(const Type& to_send, Type& to_recv, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type & to_send,Type & to_recv,int partner,int send_tag=0,int recv_tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
send_recv_single	liborangepower_src/mpi_handler_class.hpp	/^	inline int send_recv_single(const Type& to_send, int dst, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type & to_send,int dst,Type & to_recv,int src,int send_tag=0,int recv_tag=MPI_ANY_TAG,MPI_Comm comm=MPI_COMM_WORLD,MPI_Status * status=MPI_STATUS_IGNORE) const
send_single	liborangepower_src/mpi_handler_class.hpp	/^	inline int send_single(const Type& some_var, int dst, int tag=0,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:public	signature:(const Type & some_var,int dst,int tag=0,MPI_Comm comm=MPI_COMM_WORLD) const
set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void set_bits(Type& to_set, size_t mask)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_set,size_t mask)
set_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void set_bits_with_range(Type& to_set, size_t val,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_set,size_t val,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
size	liborangepower_src/array_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:size_t	access:public	signature:() const
size	liborangepower_src/array_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:size_t	access:public	signature:() const
size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	const Vec2<size_t>& size_2d() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Vec2<size_t> &	access:public	signature:() const
size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	const Vec2<size_t>& size_2d() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Vec2<size_t> &	access:public	signature:() const
src_ast_gen_class_hpp	ast_gen_class.hpp	/^#define src_ast_gen_class_hpp$/;"	kind:d
src_code_chunk	ast_gen_class.hpp	/^	inline auto src_code_chunk(State* state=nullptr) const$/;"	kind:f	class:Lexer	typeref:typename:auto	access:public	signature:(State * state=nullptr) const
src_code_chunk	liborangepower_src/lexer_base_class.hpp	/^	inline Type src_code_chunk(const State* other_state=nullptr) const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:Type	access:public	signature:(const State * other_state=nullptr) const
src_misc_includes_hpp	misc_includes.hpp	/^#define src_misc_includes_hpp$/;"	kind:d
src_src_code_chunk_class_hpp	src_code_chunk_class.hpp	/^#define src_src_code_chunk_class_hpp$/;"	kind:d
start	liborangepower_src/time_stuff.hpp	/^	inline void start()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:void	access:public	signature:()
start_tp	liborangepower_src/time_stuff.hpp	/^	std::chrono::high_resolution_clock::time_point start_tp, end_tp;$/;"	kind:m	class:liborangepower::time::Profiler	typeref:typename:std::chrono::high_resolution_clock::time_point	access:protected
starting_thread_num	liborangepower_src/mpi_handler_class.hpp	/^	inline size_t starting_thread_num() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:size_t	access:public	signature:() const
stop	liborangepower_src/time_stuff.hpp	/^	inline auto stop()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
str_is_base_10_sint_bignum	liborangepower_src/gmp_stuff.hpp	/^bool str_is_base_10_sint_bignum(const std::string& str, BigNum& ret);$/;"	kind:p	namespace:liborangepower::bignum	typeref:typename:bool	signature:(const std::string & str,BigNum & ret)
str_is_base_10_sint_bignum	liborangepower_src/gmp_stuff/gmp_stuff.cpp	/^bool str_is_base_10_sint_bignum(const std::string& str, BigNum& ret)$/;"	kind:f	namespace:liborangepower::bignum	typeref:typename:bool	signature:(const std::string & str,BigNum & ret)
strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom()$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:()
strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom(const FirstArgType& first_val,$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstArgType & first_val,RemArgTypes &&...rem_args)
strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom(const Type& to_concat)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const Type & to_concat)
strappcom2	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom2(const FirstArgType& first_val,$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstArgType & first_val,RemArgTypes &&...rem_args)
string	misc_includes.hpp	/^using string = std::string;$/;"	kind:t	typeref:typename:std::string
strings	liborangepower_src/string_conversion_stuff.hpp	/^namespace strings$/;"	kind:n	namespace:liborangepower
syntax_error	src_code_chunk_class.hpp	/^	inline void syntax_error(const string& msg, int status=1) const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:void	access:public	signature:(const string & msg,int status=1) const
time	liborangepower_src/time_stuff.hpp	/^namespace time$/;"	kind:n	namespace:liborangepower
tok	liborangepower_src/lexer_base_class.hpp	/^	inline auto tok() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
tok_ident_map	ast_gen_class.cpp	/^const std::map<Tok, string> tok_ident_map$/;"	kind:v	typeref:typename:const std::map<Tok,string>
total_num_threads	liborangepower_src/mpi_handler_class.hpp	/^	inline size_t total_num_threads() const$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:size_t	access:public	signature:() const
type	ast_gen_class.hpp	/^		string type, ident;$/;"	kind:m	class:AstGen::Var	typeref:typename:string	access:public
type_is_signed	liborangepower_src/misc_utility_funcs.hpp	/^constexpr inline bool type_is_signed()$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:()
u16	liborangepower_src/misc_types.hpp	/^typedef uint16_t u16;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint16_t
u32	liborangepower_src/misc_types.hpp	/^typedef uint32_t u32;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint32_t
u64	liborangepower_src/misc_types.hpp	/^typedef uint64_t u64;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint64_t
u8	liborangepower_src/misc_types.hpp	/^typedef uint8_t u8;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint8_t
uint	liborangepower_src/misc_types.hpp	/^typedef unsigned int uint;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:unsigned int
unique_ptr	misc_includes.hpp	/^using unique_ptr = std::unique_ptr<Type>;$/;"	kind:t	typeref:typename:std::unique_ptr<Type>
valid	liborangepower_src/parser_base_class.hpp	/^		inline bool valid() const$/;"	kind:f	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:bool	access:public	signature:() const
var_ident_set	ast_gen_class.hpp	/^		std::set<string> children_ident_set, var_ident_set;$/;"	kind:m	class:AstGen::Node	typeref:typename:std::set<string>	access:public
var_vec	ast_gen_class.hpp	/^		std::vector<Var> var_vec;$/;"	kind:m	class:AstGen::Node	typeref:typename:std::vector<Var>	access:public
warn	src_code_chunk_class.hpp	/^	inline void warn(const string& msg) const$/;"	kind:f	class:frost_hdl::SrcCodeChunk	typeref:typename:void	access:public	signature:(const string & msg) const
width	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t width() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
width	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t width() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
width_of_type	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr size_t width_of_type()$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:size_t	signature:()
width_of_type	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr size_t width_of_type(const Type& to_check)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:size_t	signature:(const Type & to_check)
with	liborangepower_src/with_defines.hpp	/^#define with(/;"	kind:d	signature:(obj,val)
wrapped_recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int wrapped_recv(Type* buf, int num_instances, int src,$/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(Type * buf,int num_instances,int src,int tag,MPI_Comm comm,MPI_Status * status) const
wrapped_send	liborangepower_src/mpi_handler_class.hpp	/^	inline int wrapped_send(const Type* buf, int num_instances, int dst, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(const Type * buf,int num_instances,int dst,int tag,MPI_Comm comm) const
wrapped_send_recv	liborangepower_src/mpi_handler_class.hpp	/^	inline int wrapped_send_recv(const Type* send_buf, $/;"	kind:f	class:liborangepower::mpi::MpiHandler	typeref:typename:int	access:protected	signature:(const Type * send_buf,int num_send_instances,int dst,int send_tag,Type * recv_buf,int num_recv_instances,int src,int recv_tag,MPI_Comm comm,MPI_Status * status) const
write_json	liborangepower_src/json_stuff.hpp	/^inline void write_json(const std::string& output_file_name, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const std::string & output_file_name,Json::Value * root)
write_json	liborangepower_src/json_stuff.hpp	/^inline void write_json(std::ostream& os, Json::Value* root)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(std::ostream & os,Json::Value * root)
write_json	liborangepower_src/json_stuff.hpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,const std::string & output_file_name,Json::Value * root)
write_json	liborangepower_src/json_stuff.hpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,std::ostream & os,Json::Value * root)
write_json	liborangepower_src/json_stuff/json_stuff.cpp	/^void write_json(Json::StreamWriterBuilder* wbuilder, std::ostream& os, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,std::ostream & os,Json::Value * root)
write_json	liborangepower_src/json_stuff/json_stuff.cpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,const std::string & output_file_name,Json::Value * root)
x	liborangepower_src/lexer_base_class.hpp	/^	inline auto x() const$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:auto	access:public	signature:() const
x	liborangepower_src/vec2_classes.hpp	/^	Type x, y;$/;"	kind:m	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public
y	liborangepower_src/vec2_classes.hpp	/^	Type x, y;$/;"	kind:m	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public
zwith	liborangepower_src/with_defines.hpp	/^#define zwith(/;"	kind:d	signature:(obj)
~AstGen	ast_gen_class.cpp	/^AstGen::~AstGen()$/;"	kind:f	class:AstGen	signature:()
~AstGen	ast_gen_class.hpp	/^	~AstGen();$/;"	kind:p	class:AstGen	typeref:typename:AstGen	access:public	signature:()
~CircLinkedList	liborangepower_src/linked_list_classes.hpp	/^	virtual inline ~CircLinkedList()$/;"	kind:f	class:liborangepower::containers::CircLinkedList	typeref:typename:CircLinkedList	access:public	signature:()
~LexStateSets	liborangepower_src/parser_base_class.hpp	/^		~LexStateSets()$/;"	kind:f	class:liborangepower::lang::ParserBase::LexStateSets	typeref:typename:LexStateSets	access:public	signature:()
~Lexer	ast_gen_class.hpp	/^	~Lexer();$/;"	kind:p	class:Lexer	typeref:typename:Lexer	access:public	signature:()
~LexerBase	liborangepower_src/lexer_base_class.hpp	/^	virtual ~LexerBase()$/;"	kind:f	class:liborangepower::lang::LexerBase	typeref:typename:LexerBase	access:public	signature:()
~MoveOnlyPrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^	virtual ~MoveOnlyPrevCurrPair() = default;$/;"	kind:p	class:liborangepower::containers::MoveOnlyPrevCurrPair	access:public	signature:()
~MpiHandler	liborangepower_src/mpi_handler_class.hpp	/^	virtual inline ~MpiHandler()$/;"	kind:f	class:liborangepower::mpi::MpiHandler	access:public	signature:()
~Node	ast_gen_class.hpp	/^		~Node() = default;$/;"	kind:p	class:AstGen::Node	access:public	signature:()
~Node	liborangepower_src/linked_list_classes.hpp	/^		~Node() = default;$/;"	kind:p	class:liborangepower::containers::CircLinkedList::Node	access:public	signature:()
~NodeIterator	liborangepower_src/linked_list_classes.hpp	/^		~NodeIterator() = default;$/;"	kind:p	class:liborangepower::containers::CircLinkedList::NodeIterator	access:public	signature:()
~ParserBase	liborangepower_src/parser_base_class.hpp	/^	virtual ~ParserBase()$/;"	kind:f	class:liborangepower::lang::ParserBase	typeref:typename:ParserBase	access:public	signature:()
~PrevCurrPair	liborangepower_src/prev_curr_pair_classes.hpp	/^	virtual ~PrevCurrPair() = default;$/;"	kind:p	class:liborangepower::containers::PrevCurrPair	access:public	signature:()
~Prng	liborangepower_src/time_stuff.hpp	/^	virtual ~Prng() = default;$/;"	kind:p	class:liborangepower::time::Prng	access:public	signature:()
~SrcCodeChunk	src_code_chunk_class.cpp	/^SrcCodeChunk::~SrcCodeChunk()$/;"	kind:f	class:frost_hdl::SrcCodeChunk	signature:()
~SrcCodeChunk	src_code_chunk_class.hpp	/^	virtual ~SrcCodeChunk();$/;"	kind:p	class:frost_hdl::SrcCodeChunk	access:public	signature:()
~State	liborangepower_src/lexer_base_class.hpp	/^		~State()$/;"	kind:f	class:liborangepower::lang::LexerBase::State	typeref:typename:State	access:public	signature:()
~Var	ast_gen_class.hpp	/^		~Var() = default;$/;"	kind:p	class:AstGen::Var	access:public	signature:()
~Vec2	liborangepower_src/vec2_classes.hpp	/^	virtual ~Vec2() = default;$/;"	kind:p	class:liborangepower::containers::Vec2	access:public	signature:()
